"""
This type stub file was generated by pyright.
"""

import PySide6.QtNetwork
import PySide6.QtCore
import enum
from __future__ import annotations
from typing import Any, Callable, Dict, List, Optional, OrderedDict, Sequence, Tuple, Type, Union, overload
from shiboken6 import Shiboken

class QAbstractNetworkCache(PySide6.QtCore.QObject):
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def cacheSize(self) -> int:
        ...
    
    def clear(self) -> None:
        ...
    
    def data(self, url: Union[PySide6.QtCore.QUrl, str]) -> PySide6.QtCore.QIODevice:
        ...
    
    def insert(self, device: PySide6.QtCore.QIODevice) -> None:
        ...
    
    def metaData(self, url: Union[PySide6.QtCore.QUrl, str]) -> PySide6.QtNetwork.QNetworkCacheMetaData:
        ...
    
    def prepare(self, metaData: PySide6.QtNetwork.QNetworkCacheMetaData) -> PySide6.QtCore.QIODevice:
        ...
    
    def remove(self, url: Union[PySide6.QtCore.QUrl, str]) -> bool:
        ...
    
    def updateMetaData(self, metaData: PySide6.QtNetwork.QNetworkCacheMetaData) -> None:
        ...
    


class QAbstractSocket(PySide6.QtCore.QIODevice):
    class BindFlag(enum.Flag):
        DefaultForPlatform: QAbstractSocket.BindFlag = ...
        ShareAddress: QAbstractSocket.BindFlag = ...
        DontShareAddress: QAbstractSocket.BindFlag = ...
        ReuseAddressHint: QAbstractSocket.BindFlag = ...
    
    
    class NetworkLayerProtocol(enum.Enum):
        UnknownNetworkLayerProtocol: QAbstractSocket.NetworkLayerProtocol = ...
        IPv4Protocol: QAbstractSocket.NetworkLayerProtocol = ...
        IPv6Protocol: QAbstractSocket.NetworkLayerProtocol = ...
        AnyIPProtocol: QAbstractSocket.NetworkLayerProtocol = ...
    
    
    class PauseMode(enum.Flag):
        PauseNever: QAbstractSocket.PauseMode = ...
        PauseOnSslErrors: QAbstractSocket.PauseMode = ...
    
    
    class SocketError(enum.Enum):
        UnknownSocketError: QAbstractSocket.SocketError = ...
        ConnectionRefusedError: QAbstractSocket.SocketError = ...
        RemoteHostClosedError: QAbstractSocket.SocketError = ...
        HostNotFoundError: QAbstractSocket.SocketError = ...
        SocketAccessError: QAbstractSocket.SocketError = ...
        SocketResourceError: QAbstractSocket.SocketError = ...
        SocketTimeoutError: QAbstractSocket.SocketError = ...
        DatagramTooLargeError: QAbstractSocket.SocketError = ...
        NetworkError: QAbstractSocket.SocketError = ...
        AddressInUseError: QAbstractSocket.SocketError = ...
        SocketAddressNotAvailableError: QAbstractSocket.SocketError = ...
        UnsupportedSocketOperationError: QAbstractSocket.SocketError = ...
        UnfinishedSocketOperationError: QAbstractSocket.SocketError = ...
        ProxyAuthenticationRequiredError: QAbstractSocket.SocketError = ...
        SslHandshakeFailedError: QAbstractSocket.SocketError = ...
        ProxyConnectionRefusedError: QAbstractSocket.SocketError = ...
        ProxyConnectionClosedError: QAbstractSocket.SocketError = ...
        ProxyConnectionTimeoutError: QAbstractSocket.SocketError = ...
        ProxyNotFoundError: QAbstractSocket.SocketError = ...
        ProxyProtocolError: QAbstractSocket.SocketError = ...
        OperationError: QAbstractSocket.SocketError = ...
        SslInternalError: QAbstractSocket.SocketError = ...
        SslInvalidUserDataError: QAbstractSocket.SocketError = ...
        TemporaryError: QAbstractSocket.SocketError = ...
    
    
    class SocketOption(enum.Enum):
        LowDelayOption: QAbstractSocket.SocketOption = ...
        KeepAliveOption: QAbstractSocket.SocketOption = ...
        MulticastTtlOption: QAbstractSocket.SocketOption = ...
        MulticastLoopbackOption: QAbstractSocket.SocketOption = ...
        TypeOfServiceOption: QAbstractSocket.SocketOption = ...
        SendBufferSizeSocketOption: QAbstractSocket.SocketOption = ...
        ReceiveBufferSizeSocketOption: QAbstractSocket.SocketOption = ...
        PathMtuSocketOption: QAbstractSocket.SocketOption = ...
    
    
    class SocketState(enum.Enum):
        UnconnectedState: QAbstractSocket.SocketState = ...
        HostLookupState: QAbstractSocket.SocketState = ...
        ConnectingState: QAbstractSocket.SocketState = ...
        ConnectedState: QAbstractSocket.SocketState = ...
        BoundState: QAbstractSocket.SocketState = ...
        ListeningState: QAbstractSocket.SocketState = ...
        ClosingState: QAbstractSocket.SocketState = ...
    
    
    class SocketType(enum.Enum):
        UnknownSocketType: QAbstractSocket.SocketType = ...
        TcpSocket: QAbstractSocket.SocketType = ...
        UdpSocket: QAbstractSocket.SocketType = ...
        SctpSocket: QAbstractSocket.SocketType = ...
    
    
    def __init__(self, socketType: PySide6.QtNetwork.QAbstractSocket.SocketType, parent: PySide6.QtCore.QObject) -> None:
        ...
    
    def abort(self) -> None:
        ...
    
    @overload
    def bind(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool:
        ...
    
    @overload
    def bind(self, port: int = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool:
        ...
    
    def bytesAvailable(self) -> int:
        ...
    
    def bytesToWrite(self) -> int:
        ...
    
    def close(self) -> None:
        ...
    
    @overload
    def connectToHost(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> None:
        ...
    
    @overload
    def connectToHost(self, hostName: str, port: int, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ..., protocol: PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...) -> None:
        ...
    
    def disconnectFromHost(self) -> None:
        ...
    
    def error(self) -> PySide6.QtNetwork.QAbstractSocket.SocketError:
        ...
    
    def flush(self) -> bool:
        ...
    
    def isSequential(self) -> bool:
        ...
    
    def isValid(self) -> bool:
        ...
    
    def localAddress(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def localPort(self) -> int:
        ...
    
    def pauseMode(self) -> PySide6.QtNetwork.QAbstractSocket.PauseMode:
        ...
    
    def peerAddress(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def peerName(self) -> str:
        ...
    
    def peerPort(self) -> int:
        ...
    
    def protocolTag(self) -> str:
        ...
    
    def proxy(self) -> PySide6.QtNetwork.QNetworkProxy:
        ...
    
    def readBufferSize(self) -> int:
        ...
    
    def readData(self, maxlen: int) -> object:
        ...
    
    def readLineData(self, maxlen: int) -> object:
        ...
    
    def resume(self) -> None:
        ...
    
    def setLocalAddress(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> None:
        ...
    
    def setLocalPort(self, port: int) -> None:
        ...
    
    def setPauseMode(self, pauseMode: PySide6.QtNetwork.QAbstractSocket.PauseMode) -> None:
        ...
    
    def setPeerAddress(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> None:
        ...
    
    def setPeerName(self, name: str) -> None:
        ...
    
    def setPeerPort(self, port: int) -> None:
        ...
    
    def setProtocolTag(self, tag: str) -> None:
        ...
    
    def setProxy(self, networkProxy: Union[PySide6.QtNetwork.QNetworkProxy, PySide6.QtNetwork.QNetworkProxy.ProxyType]) -> None:
        ...
    
    def setReadBufferSize(self, size: int) -> None:
        ...
    
    def setSocketDescriptor(self, socketDescriptor: int, state: PySide6.QtNetwork.QAbstractSocket.SocketState = ..., openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool:
        ...
    
    def setSocketError(self, socketError: PySide6.QtNetwork.QAbstractSocket.SocketError) -> None:
        ...
    
    def setSocketOption(self, option: PySide6.QtNetwork.QAbstractSocket.SocketOption, value: Any) -> None:
        ...
    
    def setSocketState(self, state: PySide6.QtNetwork.QAbstractSocket.SocketState) -> None:
        ...
    
    def skipData(self, maxSize: int) -> int:
        ...
    
    def socketDescriptor(self) -> int:
        ...
    
    def socketOption(self, option: PySide6.QtNetwork.QAbstractSocket.SocketOption) -> Any:
        ...
    
    def socketType(self) -> PySide6.QtNetwork.QAbstractSocket.SocketType:
        ...
    
    def state(self) -> PySide6.QtNetwork.QAbstractSocket.SocketState:
        ...
    
    def waitForBytesWritten(self, msecs: int = ...) -> bool:
        ...
    
    def waitForConnected(self, msecs: int = ...) -> bool:
        ...
    
    def waitForDisconnected(self, msecs: int = ...) -> bool:
        ...
    
    def waitForReadyRead(self, msecs: int = ...) -> bool:
        ...
    
    def writeData(self, data: bytes, len: int) -> int:
        ...
    


class QAuthenticator(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QAuthenticator) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def isNull(self) -> bool:
        ...
    
    def option(self, opt: str) -> Any:
        ...
    
    def options(self) -> Dict[str, Any]:
        ...
    
    def password(self) -> str:
        ...
    
    def realm(self) -> str:
        ...
    
    def setOption(self, opt: str, value: Any) -> None:
        ...
    
    def setPassword(self, password: str) -> None:
        ...
    
    def setRealm(self, realm: str) -> None:
        ...
    
    def setUser(self, user: str) -> None:
        ...
    
    def user(self) -> str:
        ...
    


class QDnsDomainNameRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QDnsDomainNameRecord) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def name(self) -> str:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QDnsDomainNameRecord) -> None:
        ...
    
    def timeToLive(self) -> int:
        ...
    
    def value(self) -> str:
        ...
    


class QDnsHostAddressRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QDnsHostAddressRecord) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def name(self) -> str:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QDnsHostAddressRecord) -> None:
        ...
    
    def timeToLive(self) -> int:
        ...
    
    def value(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    


class QDnsLookup(PySide6.QtCore.QObject):
    class Error(enum.Enum):
        NoError: QDnsLookup.Error = ...
        ResolverError: QDnsLookup.Error = ...
        OperationCancelledError: QDnsLookup.Error = ...
        InvalidRequestError: QDnsLookup.Error = ...
        InvalidReplyError: QDnsLookup.Error = ...
        ServerFailureError: QDnsLookup.Error = ...
        ServerRefusedError: QDnsLookup.Error = ...
        NotFoundError: QDnsLookup.Error = ...
    
    
    class Type(enum.Enum):
        A: QDnsLookup.Type = ...
        NS: QDnsLookup.Type = ...
        CNAME: QDnsLookup.Type = ...
        PTR: QDnsLookup.Type = ...
        MX: QDnsLookup.Type = ...
        TXT: QDnsLookup.Type = ...
        AAAA: QDnsLookup.Type = ...
        SRV: QDnsLookup.Type = ...
        ANY: QDnsLookup.Type = ...
    
    
    @overload
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    @overload
    def __init__(self, type: PySide6.QtNetwork.QDnsLookup.Type, name: str, nameserver: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    @overload
    def __init__(self, type: PySide6.QtNetwork.QDnsLookup.Type, name: str, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def abort(self) -> None:
        ...
    
    def canonicalNameRecords(self) -> List[PySide6.QtNetwork.QDnsDomainNameRecord]:
        ...
    
    def error(self) -> PySide6.QtNetwork.QDnsLookup.Error:
        ...
    
    def errorString(self) -> str:
        ...
    
    def hostAddressRecords(self) -> List[PySide6.QtNetwork.QDnsHostAddressRecord]:
        ...
    
    def isFinished(self) -> bool:
        ...
    
    def lookup(self) -> None:
        ...
    
    def mailExchangeRecords(self) -> List[PySide6.QtNetwork.QDnsMailExchangeRecord]:
        ...
    
    def name(self) -> str:
        ...
    
    def nameServerRecords(self) -> List[PySide6.QtNetwork.QDnsDomainNameRecord]:
        ...
    
    def nameserver(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def pointerRecords(self) -> List[PySide6.QtNetwork.QDnsDomainNameRecord]:
        ...
    
    def serviceRecords(self) -> List[PySide6.QtNetwork.QDnsServiceRecord]:
        ...
    
    def setName(self, name: str) -> None:
        ...
    
    def setNameserver(self, nameserver: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> None:
        ...
    
    def setType(self, arg__1: PySide6.QtNetwork.QDnsLookup.Type) -> None:
        ...
    
    def textRecords(self) -> List[PySide6.QtNetwork.QDnsTextRecord]:
        ...
    
    def type(self) -> PySide6.QtNetwork.QDnsLookup.Type:
        ...
    


class QDnsMailExchangeRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QDnsMailExchangeRecord) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def exchange(self) -> str:
        ...
    
    def name(self) -> str:
        ...
    
    def preference(self) -> int:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QDnsMailExchangeRecord) -> None:
        ...
    
    def timeToLive(self) -> int:
        ...
    


class QDnsServiceRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QDnsServiceRecord) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def name(self) -> str:
        ...
    
    def port(self) -> int:
        ...
    
    def priority(self) -> int:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QDnsServiceRecord) -> None:
        ...
    
    def target(self) -> str:
        ...
    
    def timeToLive(self) -> int:
        ...
    
    def weight(self) -> int:
        ...
    


class QDnsTextRecord(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QDnsTextRecord) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def name(self) -> str:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QDnsTextRecord) -> None:
        ...
    
    def timeToLive(self) -> int:
        ...
    
    def values(self) -> List[PySide6.QtCore.QByteArray]:
        ...
    


class QDtls(PySide6.QtCore.QObject):
    class HandshakeState(enum.Enum):
        HandshakeNotStarted: QDtls.HandshakeState = ...
        HandshakeInProgress: QDtls.HandshakeState = ...
        PeerVerificationFailed: QDtls.HandshakeState = ...
        HandshakeComplete: QDtls.HandshakeState = ...
    
    
    def __init__(self, mode: PySide6.QtNetwork.QSslSocket.SslMode, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def abortHandshake(self, socket: PySide6.QtNetwork.QUdpSocket) -> bool:
        ...
    
    def decryptDatagram(self, socket: PySide6.QtNetwork.QUdpSocket, dgram: Union[PySide6.QtCore.QByteArray, bytes]) -> PySide6.QtCore.QByteArray:
        ...
    
    def doHandshake(self, socket: PySide6.QtNetwork.QUdpSocket, dgram: Union[PySide6.QtCore.QByteArray, bytes] = ...) -> bool:
        ...
    
    def dtlsConfiguration(self) -> PySide6.QtNetwork.QSslConfiguration:
        ...
    
    def dtlsError(self) -> PySide6.QtNetwork.QDtlsError:
        ...
    
    def dtlsErrorString(self) -> str:
        ...
    
    def handleTimeout(self, socket: PySide6.QtNetwork.QUdpSocket) -> bool:
        ...
    
    def handshakeState(self) -> PySide6.QtNetwork.QDtls.HandshakeState:
        ...
    
    def ignoreVerificationErrors(self, errorsToIgnore: Sequence[PySide6.QtNetwork.QSslError]) -> None:
        ...
    
    def isConnectionEncrypted(self) -> bool:
        ...
    
    def mtuHint(self) -> int:
        ...
    
    def peerAddress(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def peerPort(self) -> int:
        ...
    
    def peerVerificationErrors(self) -> List[PySide6.QtNetwork.QSslError]:
        ...
    
    def peerVerificationName(self) -> str:
        ...
    
    def resumeHandshake(self, socket: PySide6.QtNetwork.QUdpSocket) -> bool:
        ...
    
    def sessionCipher(self) -> PySide6.QtNetwork.QSslCipher:
        ...
    
    def sessionProtocol(self) -> PySide6.QtNetwork.QSsl.SslProtocol:
        ...
    
    def setDtlsConfiguration(self, configuration: PySide6.QtNetwork.QSslConfiguration) -> bool:
        ...
    
    def setMtuHint(self, mtuHint: int) -> None:
        ...
    
    def setPeer(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int, verificationName: str = ...) -> bool:
        ...
    
    def setPeerVerificationName(self, name: str) -> bool:
        ...
    
    def shutdown(self, socket: PySide6.QtNetwork.QUdpSocket) -> bool:
        ...
    
    def sslMode(self) -> PySide6.QtNetwork.QSslSocket.SslMode:
        ...
    
    def writeDatagramEncrypted(self, socket: PySide6.QtNetwork.QUdpSocket, dgram: Union[PySide6.QtCore.QByteArray, bytes]) -> int:
        ...
    


class QDtlsClientVerifier(PySide6.QtCore.QObject):
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def dtlsError(self) -> PySide6.QtNetwork.QDtlsError:
        ...
    
    def dtlsErrorString(self) -> str:
        ...
    
    def verifiedHello(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def verifyClient(self, socket: PySide6.QtNetwork.QUdpSocket, dgram: Union[PySide6.QtCore.QByteArray, bytes], address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int) -> bool:
        ...
    


class QDtlsError(enum.Enum):
    NoError: QDtlsError = ...
    InvalidInputParameters: QDtlsError = ...
    InvalidOperation: QDtlsError = ...
    UnderlyingSocketError: QDtlsError = ...
    RemoteClosedConnectionError: QDtlsError = ...
    PeerVerificationError: QDtlsError = ...
    TlsInitializationError: QDtlsError = ...
    TlsFatalError: QDtlsError = ...
    TlsNonFatalError: QDtlsError = ...


class QHostAddress(Shiboken.Object):
    UnknownNetworkLayerProtocol: QAbstractSocket.NetworkLayerProtocol = ...
    IPv4Protocol: QAbstractSocket.NetworkLayerProtocol = ...
    IPv6Protocol: QAbstractSocket.NetworkLayerProtocol = ...
    AnyIPProtocol: QAbstractSocket.NetworkLayerProtocol = ...
    class ConversionModeFlag(enum.Flag):
        StrictConversion: QHostAddress.ConversionModeFlag = ...
        ConvertV4MappedToIPv4: QHostAddress.ConversionModeFlag = ...
        ConvertV4CompatToIPv4: QHostAddress.ConversionModeFlag = ...
        ConvertUnspecifiedAddress: QHostAddress.ConversionModeFlag = ...
        ConvertLocalHost: QHostAddress.ConversionModeFlag = ...
        TolerantConversion: QHostAddress.ConversionModeFlag = ...
    
    
    class SpecialAddress(enum.Enum):
        Null: QHostAddress.SpecialAddress = ...
        Broadcast: QHostAddress.SpecialAddress = ...
        LocalHost: QHostAddress.SpecialAddress = ...
        LocalHostIPv6: QHostAddress.SpecialAddress = ...
        Any: QHostAddress.SpecialAddress = ...
        AnyIPv6: QHostAddress.SpecialAddress = ...
        AnyIPv4: QHostAddress.SpecialAddress = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, address: PySide6.QtNetwork.QHostAddress.SpecialAddress) -> None:
        ...
    
    @overload
    def __init__(self, address: str) -> None:
        ...
    
    @overload
    def __init__(self, copy: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> None:
        ...
    
    @overload
    def __init__(self, ip4Addr: int) -> None:
        ...
    
    @overload
    def __init__(self, ip6Addr: PySide6.QtNetwork.QIPv6Address) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def __lshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream:
        ...
    
    def __rshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream:
        ...
    
    def clear(self) -> None:
        ...
    
    def isBroadcast(self) -> bool:
        ...
    
    def isEqual(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], mode: PySide6.QtNetwork.QHostAddress.ConversionModeFlag = ...) -> bool:
        ...
    
    def isGlobal(self) -> bool:
        ...
    
    @overload
    def isInSubnet(self, subnet: Tuple[PySide6.QtNetwork.QHostAddress, int]) -> bool:
        ...
    
    @overload
    def isInSubnet(self, subnet: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], netmask: int) -> bool:
        ...
    
    def isLinkLocal(self) -> bool:
        ...
    
    def isLoopback(self) -> bool:
        ...
    
    def isMulticast(self) -> bool:
        ...
    
    def isNull(self) -> bool:
        ...
    
    def isSiteLocal(self) -> bool:
        ...
    
    def isUniqueLocalUnicast(self) -> bool:
        ...
    
    @staticmethod
    def parseSubnet(subnet: str) -> Tuple[PySide6.QtNetwork.QHostAddress, int]:
        ...
    
    def protocol(self) -> PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol:
        ...
    
    def scopeId(self) -> str:
        ...
    
    @overload
    def setAddress(self, address: PySide6.QtNetwork.QHostAddress.SpecialAddress) -> None:
        ...
    
    @overload
    def setAddress(self, address: str) -> bool:
        ...
    
    @overload
    def setAddress(self, ip4Addr: int) -> None:
        ...
    
    @overload
    def setAddress(self, ip6Addr: PySide6.QtNetwork.QIPv6Address) -> None:
        ...
    
    def setScopeId(self, id: str) -> None:
        ...
    
    def swap(self, other: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> None:
        ...
    
    def toIPv4Address(self) -> Tuple[int, bool]:
        ...
    
    def toIPv6Address(self) -> PySide6.QtNetwork.QIPv6Address:
        ...
    
    def toString(self) -> str:
        ...
    


class QHostInfo(Shiboken.Object):
    class HostInfoError(enum.Enum):
        NoError: QHostInfo.HostInfoError = ...
        HostNotFound: QHostInfo.HostInfoError = ...
        UnknownError: QHostInfo.HostInfoError = ...
    
    
    @overload
    def __init__(self, d: Union[PySide6.QtNetwork.QHostInfo, int]) -> None:
        ...
    
    @overload
    def __init__(self, lookupId: int = ...) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    @staticmethod
    def abortHostLookup(lookupId: int) -> None:
        ...
    
    def addresses(self) -> List[PySide6.QtNetwork.QHostAddress]:
        ...
    
    def error(self) -> PySide6.QtNetwork.QHostInfo.HostInfoError:
        ...
    
    def errorString(self) -> str:
        ...
    
    @staticmethod
    def fromName(name: str) -> PySide6.QtNetwork.QHostInfo:
        ...
    
    def hostName(self) -> str:
        ...
    
    @staticmethod
    def localDomainName() -> str:
        ...
    
    @staticmethod
    def localHostName() -> str:
        ...
    
    @overload
    @staticmethod
    def lookupHost(name: str, receiver: PySide6.QtCore.QObject, member: bytes) -> int:
        ...
    
    @overload
    def lookupHost(self, arg__1: str, arg__2: Callable) -> None:
        ...
    
    def lookupId(self) -> int:
        ...
    
    def setAddresses(self, addresses: Sequence[PySide6.QtNetwork.QHostAddress]) -> None:
        ...
    
    def setError(self, error: PySide6.QtNetwork.QHostInfo.HostInfoError) -> None:
        ...
    
    def setErrorString(self, errorString: str) -> None:
        ...
    
    def setHostName(self, name: str) -> None:
        ...
    
    def setLookupId(self, id: int) -> None:
        ...
    
    def swap(self, other: Union[PySide6.QtNetwork.QHostInfo, int]) -> None:
        ...
    


class QHstsPolicy(Shiboken.Object):
    class PolicyFlag(enum.Flag):
        IncludeSubDomains: QHstsPolicy.PolicyFlag = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, expiry: PySide6.QtCore.QDateTime, flags: PySide6.QtNetwork.QHstsPolicy.PolicyFlag, host: str, mode: PySide6.QtCore.QUrl.ParsingMode = ...) -> None:
        ...
    
    @overload
    def __init__(self, rhs: PySide6.QtNetwork.QHstsPolicy) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def expiry(self) -> PySide6.QtCore.QDateTime:
        ...
    
    def host(self, options: PySide6.QtCore.QUrl.ComponentFormattingOption = ...) -> str:
        ...
    
    def includesSubDomains(self) -> bool:
        ...
    
    def isExpired(self) -> bool:
        ...
    
    def setExpiry(self, expiry: PySide6.QtCore.QDateTime) -> None:
        ...
    
    def setHost(self, host: str, mode: PySide6.QtCore.QUrl.ParsingMode = ...) -> None:
        ...
    
    def setIncludesSubDomains(self, include: bool) -> None:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QHstsPolicy) -> None:
        ...
    


class QHttp2Configuration(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QHttp2Configuration) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def huffmanCompressionEnabled(self) -> bool:
        ...
    
    def maxFrameSize(self) -> int:
        ...
    
    def serverPushEnabled(self) -> bool:
        ...
    
    def sessionReceiveWindowSize(self) -> int:
        ...
    
    def setHuffmanCompressionEnabled(self, enable: bool) -> None:
        ...
    
    def setMaxFrameSize(self, size: int) -> bool:
        ...
    
    def setServerPushEnabled(self, enable: bool) -> None:
        ...
    
    def setSessionReceiveWindowSize(self, size: int) -> bool:
        ...
    
    def setStreamReceiveWindowSize(self, size: int) -> bool:
        ...
    
    def streamReceiveWindowSize(self) -> int:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QHttp2Configuration) -> None:
        ...
    


class QHttpMultiPart(PySide6.QtCore.QObject):
    class ContentType(enum.Enum):
        MixedType: QHttpMultiPart.ContentType = ...
        RelatedType: QHttpMultiPart.ContentType = ...
        FormDataType: QHttpMultiPart.ContentType = ...
        AlternativeType: QHttpMultiPart.ContentType = ...
    
    
    @overload
    def __init__(self, contentType: PySide6.QtNetwork.QHttpMultiPart.ContentType, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    @overload
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def append(self, httpPart: PySide6.QtNetwork.QHttpPart) -> None:
        ...
    
    def boundary(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def setBoundary(self, boundary: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setContentType(self, contentType: PySide6.QtNetwork.QHttpMultiPart.ContentType) -> None:
        ...
    


class QHttpPart(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QHttpPart) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def setBody(self, body: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setBodyDevice(self, device: PySide6.QtCore.QIODevice) -> None:
        ...
    
    def setHeader(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, value: Any) -> None:
        ...
    
    def setRawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes], headerValue: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QHttpPart) -> None:
        ...
    


class QIPv6Address(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, QIPv6Address: PySide6.QtNetwork.QIPv6Address) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    


class QIntList:
    ...


class QLocalServer(PySide6.QtCore.QObject):
    class SocketOption(enum.Flag):
        NoOptions: QLocalServer.SocketOption = ...
        UserAccessOption: QLocalServer.SocketOption = ...
        GroupAccessOption: QLocalServer.SocketOption = ...
        OtherAccessOption: QLocalServer.SocketOption = ...
        WorldAccessOption: QLocalServer.SocketOption = ...
        AbstractNamespaceOption: QLocalServer.SocketOption = ...
    
    
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    def errorString(self) -> str:
        ...
    
    def fullServerName(self) -> str:
        ...
    
    def hasPendingConnections(self) -> bool:
        ...
    
    def incomingConnection(self, socketDescriptor: int) -> None:
        ...
    
    def isListening(self) -> bool:
        ...
    
    @overload
    def listen(self, name: str) -> bool:
        ...
    
    @overload
    def listen(self, socketDescriptor: int) -> bool:
        ...
    
    def listenBacklogSize(self) -> int:
        ...
    
    def maxPendingConnections(self) -> int:
        ...
    
    def nextPendingConnection(self) -> PySide6.QtNetwork.QLocalSocket:
        ...
    
    @staticmethod
    def removeServer(name: str) -> bool:
        ...
    
    def serverError(self) -> PySide6.QtNetwork.QAbstractSocket.SocketError:
        ...
    
    def serverName(self) -> str:
        ...
    
    def setListenBacklogSize(self, size: int) -> None:
        ...
    
    def setMaxPendingConnections(self, numConnections: int) -> None:
        ...
    
    def setSocketOptions(self, options: PySide6.QtNetwork.QLocalServer.SocketOption) -> None:
        ...
    
    def socketDescriptor(self) -> int:
        ...
    
    def socketOptions(self) -> PySide6.QtNetwork.QLocalServer.SocketOption:
        ...
    
    def waitForNewConnection(self, msec: int) -> Tuple:
        ...
    


class QLocalSocket(PySide6.QtCore.QIODevice):
    class LocalSocketError(enum.Enum):
        UnknownSocketError: QLocalSocket.LocalSocketError = ...
        ConnectionRefusedError: QLocalSocket.LocalSocketError = ...
        PeerClosedError: QLocalSocket.LocalSocketError = ...
        ServerNotFoundError: QLocalSocket.LocalSocketError = ...
        SocketAccessError: QLocalSocket.LocalSocketError = ...
        SocketResourceError: QLocalSocket.LocalSocketError = ...
        SocketTimeoutError: QLocalSocket.LocalSocketError = ...
        DatagramTooLargeError: QLocalSocket.LocalSocketError = ...
        ConnectionError: QLocalSocket.LocalSocketError = ...
        UnsupportedSocketOperationError: QLocalSocket.LocalSocketError = ...
        OperationError: QLocalSocket.LocalSocketError = ...
    
    
    class LocalSocketState(enum.Enum):
        UnconnectedState: QLocalSocket.LocalSocketState = ...
        ConnectingState: QLocalSocket.LocalSocketState = ...
        ConnectedState: QLocalSocket.LocalSocketState = ...
        ClosingState: QLocalSocket.LocalSocketState = ...
    
    
    class SocketOption(enum.Flag):
        NoOptions: QLocalSocket.SocketOption = ...
        AbstractNamespaceOption: QLocalSocket.SocketOption = ...
    
    
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def abort(self) -> None:
        ...
    
    def bytesAvailable(self) -> int:
        ...
    
    def bytesToWrite(self) -> int:
        ...
    
    def canReadLine(self) -> bool:
        ...
    
    def close(self) -> None:
        ...
    
    @overload
    def connectToServer(self, name: str, openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> None:
        ...
    
    @overload
    def connectToServer(self, openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> None:
        ...
    
    def disconnectFromServer(self) -> None:
        ...
    
    def error(self) -> PySide6.QtNetwork.QLocalSocket.LocalSocketError:
        ...
    
    def flush(self) -> bool:
        ...
    
    def fullServerName(self) -> str:
        ...
    
    def isSequential(self) -> bool:
        ...
    
    def isValid(self) -> bool:
        ...
    
    def open(self, openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool:
        ...
    
    def readBufferSize(self) -> int:
        ...
    
    def readData(self, arg__2: int) -> object:
        ...
    
    def readLineData(self, maxSize: int) -> object:
        ...
    
    def serverName(self) -> str:
        ...
    
    def setReadBufferSize(self, size: int) -> None:
        ...
    
    def setServerName(self, name: str) -> None:
        ...
    
    def setSocketDescriptor(self, socketDescriptor: int, socketState: PySide6.QtNetwork.QLocalSocket.LocalSocketState = ..., openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool:
        ...
    
    def setSocketOptions(self, option: PySide6.QtNetwork.QLocalSocket.SocketOption) -> None:
        ...
    
    def skipData(self, maxSize: int) -> int:
        ...
    
    def socketDescriptor(self) -> int:
        ...
    
    def socketOptions(self) -> PySide6.QtNetwork.QLocalSocket.SocketOption:
        ...
    
    def state(self) -> PySide6.QtNetwork.QLocalSocket.LocalSocketState:
        ...
    
    def waitForBytesWritten(self, msecs: int = ...) -> bool:
        ...
    
    def waitForConnected(self, msecs: int = ...) -> bool:
        ...
    
    def waitForDisconnected(self, msecs: int = ...) -> bool:
        ...
    
    def waitForReadyRead(self, msecs: int = ...) -> bool:
        ...
    
    def writeData(self, arg__1: bytes, arg__2: int) -> int:
        ...
    


class QNetworkAccessManager(PySide6.QtCore.QObject):
    class Operation(enum.Enum):
        UnknownOperation: QNetworkAccessManager.Operation = ...
        HeadOperation: QNetworkAccessManager.Operation = ...
        GetOperation: QNetworkAccessManager.Operation = ...
        PutOperation: QNetworkAccessManager.Operation = ...
        PostOperation: QNetworkAccessManager.Operation = ...
        DeleteOperation: QNetworkAccessManager.Operation = ...
        CustomOperation: QNetworkAccessManager.Operation = ...
    
    
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def addStrictTransportSecurityHosts(self, knownHosts: Sequence[PySide6.QtNetwork.QHstsPolicy]) -> None:
        ...
    
    def autoDeleteReplies(self) -> bool:
        ...
    
    def cache(self) -> PySide6.QtNetwork.QAbstractNetworkCache:
        ...
    
    def clearAccessCache(self) -> None:
        ...
    
    def clearConnectionCache(self) -> None:
        ...
    
    def connectToHost(self, hostName: str, port: int = ...) -> None:
        ...
    
    @overload
    def connectToHostEncrypted(self, hostName: str, port: int, sslConfiguration: PySide6.QtNetwork.QSslConfiguration, peerName: str) -> None:
        ...
    
    @overload
    def connectToHostEncrypted(self, hostName: str, port: int = ..., sslConfiguration: PySide6.QtNetwork.QSslConfiguration = ...) -> None:
        ...
    
    def cookieJar(self) -> PySide6.QtNetwork.QNetworkCookieJar:
        ...
    
    def createRequest(self, op: PySide6.QtNetwork.QNetworkAccessManager.Operation, request: PySide6.QtNetwork.QNetworkRequest, outgoingData: Optional[PySide6.QtCore.QIODevice] = ...) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    def deleteResource(self, request: PySide6.QtNetwork.QNetworkRequest) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    def enableStrictTransportSecurityStore(self, enabled: bool, storeDir: str = ...) -> None:
        ...
    
    def get(self, request: PySide6.QtNetwork.QNetworkRequest) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    def head(self, request: PySide6.QtNetwork.QNetworkRequest) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    def isStrictTransportSecurityEnabled(self) -> bool:
        ...
    
    def isStrictTransportSecurityStoreEnabled(self) -> bool:
        ...
    
    @overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    @overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, data: Union[PySide6.QtCore.QByteArray, bytes]) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    @overload
    def post(self, request: PySide6.QtNetwork.QNetworkRequest, multiPart: PySide6.QtNetwork.QHttpMultiPart) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    def proxy(self) -> PySide6.QtNetwork.QNetworkProxy:
        ...
    
    def proxyFactory(self) -> PySide6.QtNetwork.QNetworkProxyFactory:
        ...
    
    @overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: PySide6.QtCore.QIODevice) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    @overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, data: Union[PySide6.QtCore.QByteArray, bytes]) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    @overload
    def put(self, request: PySide6.QtNetwork.QNetworkRequest, multiPart: PySide6.QtNetwork.QHttpMultiPart) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    def redirectPolicy(self) -> PySide6.QtNetwork.QNetworkRequest.RedirectPolicy:
        ...
    
    @overload
    def sendCustomRequest(self, request: PySide6.QtNetwork.QNetworkRequest, verb: Union[PySide6.QtCore.QByteArray, bytes], data: Optional[PySide6.QtCore.QIODevice] = ...) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    @overload
    def sendCustomRequest(self, request: PySide6.QtNetwork.QNetworkRequest, verb: Union[PySide6.QtCore.QByteArray, bytes], data: Union[PySide6.QtCore.QByteArray, bytes]) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    @overload
    def sendCustomRequest(self, request: PySide6.QtNetwork.QNetworkRequest, verb: Union[PySide6.QtCore.QByteArray, bytes], multiPart: PySide6.QtNetwork.QHttpMultiPart) -> PySide6.QtNetwork.QNetworkReply:
        ...
    
    def setAutoDeleteReplies(self, autoDelete: bool) -> None:
        ...
    
    def setCache(self, cache: PySide6.QtNetwork.QAbstractNetworkCache) -> None:
        ...
    
    def setCookieJar(self, cookieJar: PySide6.QtNetwork.QNetworkCookieJar) -> None:
        ...
    
    def setProxy(self, proxy: Union[PySide6.QtNetwork.QNetworkProxy, PySide6.QtNetwork.QNetworkProxy.ProxyType]) -> None:
        ...
    
    def setProxyFactory(self, factory: PySide6.QtNetwork.QNetworkProxyFactory) -> None:
        ...
    
    def setRedirectPolicy(self, policy: PySide6.QtNetwork.QNetworkRequest.RedirectPolicy) -> None:
        ...
    
    def setStrictTransportSecurityEnabled(self, enabled: bool) -> None:
        ...
    
    def setTransferTimeout(self, timeout: int = ...) -> None:
        ...
    
    def strictTransportSecurityHosts(self) -> List[PySide6.QtNetwork.QHstsPolicy]:
        ...
    
    def supportedSchemes(self) -> List[str]:
        ...
    
    def supportedSchemesImplementation(self) -> List[str]:
        ...
    
    def transferTimeout(self) -> int:
        ...
    


class QNetworkAddressEntry(Shiboken.Object):
    class DnsEligibilityStatus(enum.Enum):
        DnsEligibilityUnknown: QNetworkAddressEntry.DnsEligibilityStatus = ...
        DnsIneligible: QNetworkAddressEntry.DnsEligibilityStatus = ...
        DnsEligible: QNetworkAddressEntry.DnsEligibilityStatus = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkAddressEntry) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def broadcast(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def clearAddressLifetime(self) -> None:
        ...
    
    def dnsEligibility(self) -> PySide6.QtNetwork.QNetworkAddressEntry.DnsEligibilityStatus:
        ...
    
    def ip(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def isLifetimeKnown(self) -> bool:
        ...
    
    def isPermanent(self) -> bool:
        ...
    
    def isTemporary(self) -> bool:
        ...
    
    def netmask(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def preferredLifetime(self) -> PySide6.QtCore.QDeadlineTimer:
        ...
    
    def prefixLength(self) -> int:
        ...
    
    def setAddressLifetime(self, preferred: Union[PySide6.QtCore.QDeadlineTimer, PySide6.QtCore.QDeadlineTimer.ForeverConstant, PySide6.QtCore.Qt.TimerType, int], validity: Union[PySide6.QtCore.QDeadlineTimer, PySide6.QtCore.QDeadlineTimer.ForeverConstant, PySide6.QtCore.Qt.TimerType, int]) -> None:
        ...
    
    def setBroadcast(self, newBroadcast: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> None:
        ...
    
    def setDnsEligibility(self, status: PySide6.QtNetwork.QNetworkAddressEntry.DnsEligibilityStatus) -> None:
        ...
    
    def setIp(self, newIp: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> None:
        ...
    
    def setNetmask(self, newNetmask: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> None:
        ...
    
    def setPrefixLength(self, length: int) -> None:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QNetworkAddressEntry) -> None:
        ...
    
    def validityLifetime(self) -> PySide6.QtCore.QDeadlineTimer:
        ...
    


class QNetworkCacheMetaData(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkCacheMetaData) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def __lshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream:
        ...
    
    def __rshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream:
        ...
    
    def attributes(self) -> Dict[PySide6.QtNetwork.QNetworkRequest.Attribute, Any]:
        ...
    
    def expirationDate(self) -> PySide6.QtCore.QDateTime:
        ...
    
    def isValid(self) -> bool:
        ...
    
    def lastModified(self) -> PySide6.QtCore.QDateTime:
        ...
    
    def rawHeaders(self) -> List[Tuple[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]]:
        ...
    
    def saveToDisk(self) -> bool:
        ...
    
    def setAttributes(self, attributes: Dict[PySide6.QtNetwork.QNetworkRequest.Attribute, Any]) -> None:
        ...
    
    def setExpirationDate(self, dateTime: PySide6.QtCore.QDateTime) -> None:
        ...
    
    def setLastModified(self, dateTime: PySide6.QtCore.QDateTime) -> None:
        ...
    
    def setRawHeaders(self, headers: Sequence[Tuple[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]]) -> None:
        ...
    
    def setSaveToDisk(self, allow: bool) -> None:
        ...
    
    def setUrl(self, url: Union[PySide6.QtCore.QUrl, str]) -> None:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QNetworkCacheMetaData) -> None:
        ...
    
    def url(self) -> PySide6.QtCore.QUrl:
        ...
    


class QNetworkCookie(Shiboken.Object):
    class RawForm(enum.Enum):
        NameAndValueOnly: QNetworkCookie.RawForm = ...
        Full: QNetworkCookie.RawForm = ...
    
    
    class SameSite(enum.Enum):
        Default: QNetworkCookie.SameSite = ...
        None_: QNetworkCookie.SameSite = ...
        Lax: QNetworkCookie.SameSite = ...
        Strict: QNetworkCookie.SameSite = ...
    
    
    @overload
    def __init__(self, name: Union[PySide6.QtCore.QByteArray, bytes] = ..., value: Union[PySide6.QtCore.QByteArray, bytes] = ...) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkCookie) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def domain(self) -> str:
        ...
    
    def expirationDate(self) -> PySide6.QtCore.QDateTime:
        ...
    
    def hasSameIdentifier(self, other: PySide6.QtNetwork.QNetworkCookie) -> bool:
        ...
    
    def isHttpOnly(self) -> bool:
        ...
    
    def isSecure(self) -> bool:
        ...
    
    def isSessionCookie(self) -> bool:
        ...
    
    def name(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def normalize(self, url: Union[PySide6.QtCore.QUrl, str]) -> None:
        ...
    
    @staticmethod
    def parseCookies(cookieString: Union[PySide6.QtCore.QByteArray, bytes]) -> List[PySide6.QtNetwork.QNetworkCookie]:
        ...
    
    def path(self) -> str:
        ...
    
    def sameSitePolicy(self) -> PySide6.QtNetwork.QNetworkCookie.SameSite:
        ...
    
    def setDomain(self, domain: str) -> None:
        ...
    
    def setExpirationDate(self, date: PySide6.QtCore.QDateTime) -> None:
        ...
    
    def setHttpOnly(self, enable: bool) -> None:
        ...
    
    def setName(self, cookieName: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setPath(self, path: str) -> None:
        ...
    
    def setSameSitePolicy(self, sameSite: PySide6.QtNetwork.QNetworkCookie.SameSite) -> None:
        ...
    
    def setSecure(self, enable: bool) -> None:
        ...
    
    def setValue(self, value: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QNetworkCookie) -> None:
        ...
    
    def toRawForm(self, form: PySide6.QtNetwork.QNetworkCookie.RawForm = ...) -> PySide6.QtCore.QByteArray:
        ...
    
    def value(self) -> PySide6.QtCore.QByteArray:
        ...
    


class QNetworkCookieJar(PySide6.QtCore.QObject):
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def allCookies(self) -> List[PySide6.QtNetwork.QNetworkCookie]:
        ...
    
    def cookiesForUrl(self, url: Union[PySide6.QtCore.QUrl, str]) -> List[PySide6.QtNetwork.QNetworkCookie]:
        ...
    
    def deleteCookie(self, cookie: PySide6.QtNetwork.QNetworkCookie) -> bool:
        ...
    
    def insertCookie(self, cookie: PySide6.QtNetwork.QNetworkCookie) -> bool:
        ...
    
    def setAllCookies(self, cookieList: Sequence[PySide6.QtNetwork.QNetworkCookie]) -> None:
        ...
    
    def setCookiesFromUrl(self, cookieList: Sequence[PySide6.QtNetwork.QNetworkCookie], url: Union[PySide6.QtCore.QUrl, str]) -> bool:
        ...
    
    def updateCookie(self, cookie: PySide6.QtNetwork.QNetworkCookie) -> bool:
        ...
    
    def validateCookie(self, cookie: PySide6.QtNetwork.QNetworkCookie, url: Union[PySide6.QtCore.QUrl, str]) -> bool:
        ...
    


class QNetworkDatagram(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, data: Union[PySide6.QtCore.QByteArray, bytes], destinationAddress: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress] = ..., port: int = ...) -> None:
        ...
    
    @overload
    def __init__(self, other: Union[PySide6.QtNetwork.QNetworkDatagram, PySide6.QtCore.QByteArray]) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def clear(self) -> None:
        ...
    
    def data(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def destinationAddress(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def destinationPort(self) -> int:
        ...
    
    def hopLimit(self) -> int:
        ...
    
    def interfaceIndex(self) -> int:
        ...
    
    def isNull(self) -> bool:
        ...
    
    def isValid(self) -> bool:
        ...
    
    def makeReply(self, payload: Union[PySide6.QtCore.QByteArray, bytes]) -> PySide6.QtNetwork.QNetworkDatagram:
        ...
    
    def senderAddress(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def senderPort(self) -> int:
        ...
    
    def setData(self, data: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setDestination(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int) -> None:
        ...
    
    def setHopLimit(self, count: int) -> None:
        ...
    
    def setInterfaceIndex(self, index: int) -> None:
        ...
    
    def setSender(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int = ...) -> None:
        ...
    
    def swap(self, other: Union[PySide6.QtNetwork.QNetworkDatagram, PySide6.QtCore.QByteArray]) -> None:
        ...
    


class QNetworkDiskCache(PySide6.QtNetwork.QAbstractNetworkCache):
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def cacheDirectory(self) -> str:
        ...
    
    def cacheSize(self) -> int:
        ...
    
    def clear(self) -> None:
        ...
    
    def data(self, url: Union[PySide6.QtCore.QUrl, str]) -> PySide6.QtCore.QIODevice:
        ...
    
    def expire(self) -> int:
        ...
    
    def fileMetaData(self, fileName: str) -> PySide6.QtNetwork.QNetworkCacheMetaData:
        ...
    
    def insert(self, device: PySide6.QtCore.QIODevice) -> None:
        ...
    
    def maximumCacheSize(self) -> int:
        ...
    
    def metaData(self, url: Union[PySide6.QtCore.QUrl, str]) -> PySide6.QtNetwork.QNetworkCacheMetaData:
        ...
    
    def prepare(self, metaData: PySide6.QtNetwork.QNetworkCacheMetaData) -> PySide6.QtCore.QIODevice:
        ...
    
    def remove(self, url: Union[PySide6.QtCore.QUrl, str]) -> bool:
        ...
    
    def setCacheDirectory(self, cacheDir: str) -> None:
        ...
    
    def setMaximumCacheSize(self, size: int) -> None:
        ...
    
    def updateMetaData(self, metaData: PySide6.QtNetwork.QNetworkCacheMetaData) -> None:
        ...
    


class QNetworkInformation(PySide6.QtCore.QObject):
    class Feature(enum.Flag):
        Reachability: QNetworkInformation.Feature = ...
        CaptivePortal: QNetworkInformation.Feature = ...
        TransportMedium: QNetworkInformation.Feature = ...
        Metered: QNetworkInformation.Feature = ...
    
    
    class Reachability(enum.Enum):
        Unknown: QNetworkInformation.Reachability = ...
        Disconnected: QNetworkInformation.Reachability = ...
        Local: QNetworkInformation.Reachability = ...
        Site: QNetworkInformation.Reachability = ...
        Online: QNetworkInformation.Reachability = ...
    
    
    class TransportMedium(enum.Enum):
        Unknown: QNetworkInformation.TransportMedium = ...
        Ethernet: QNetworkInformation.TransportMedium = ...
        Cellular: QNetworkInformation.TransportMedium = ...
        WiFi: QNetworkInformation.TransportMedium = ...
        Bluetooth: QNetworkInformation.TransportMedium = ...
    
    
    @staticmethod
    def availableBackends() -> List[str]:
        ...
    
    def backendName(self) -> str:
        ...
    
    @staticmethod
    def instance() -> PySide6.QtNetwork.QNetworkInformation:
        ...
    
    def isBehindCaptivePortal(self) -> bool:
        ...
    
    def isMetered(self) -> bool:
        ...
    
    @overload
    @staticmethod
    def load(backend: str) -> bool:
        ...
    
    @overload
    @staticmethod
    def load(features: PySide6.QtNetwork.QNetworkInformation.Feature) -> bool:
        ...
    
    @staticmethod
    def loadBackendByFeatures(features: PySide6.QtNetwork.QNetworkInformation.Feature) -> bool:
        ...
    
    @staticmethod
    def loadBackendByName(backend: str) -> bool:
        ...
    
    @staticmethod
    def loadDefaultBackend() -> bool:
        ...
    
    def reachability(self) -> PySide6.QtNetwork.QNetworkInformation.Reachability:
        ...
    
    def supportedFeatures(self) -> PySide6.QtNetwork.QNetworkInformation.Feature:
        ...
    
    def supports(self, features: PySide6.QtNetwork.QNetworkInformation.Feature) -> bool:
        ...
    
    def transportMedium(self) -> PySide6.QtNetwork.QNetworkInformation.TransportMedium:
        ...
    


class QNetworkInterface(Shiboken.Object):
    class InterfaceFlag(enum.Flag):
        IsUp: QNetworkInterface.InterfaceFlag = ...
        IsRunning: QNetworkInterface.InterfaceFlag = ...
        CanBroadcast: QNetworkInterface.InterfaceFlag = ...
        IsLoopBack: QNetworkInterface.InterfaceFlag = ...
        IsPointToPoint: QNetworkInterface.InterfaceFlag = ...
        CanMulticast: QNetworkInterface.InterfaceFlag = ...
    
    
    class InterfaceType(enum.Enum):
        Unknown: QNetworkInterface.InterfaceType = ...
        Loopback: QNetworkInterface.InterfaceType = ...
        Virtual: QNetworkInterface.InterfaceType = ...
        Ethernet: QNetworkInterface.InterfaceType = ...
        Slip: QNetworkInterface.InterfaceType = ...
        CanBus: QNetworkInterface.InterfaceType = ...
        Ppp: QNetworkInterface.InterfaceType = ...
        Fddi: QNetworkInterface.InterfaceType = ...
        Ieee80211: QNetworkInterface.InterfaceType = ...
        Wifi: QNetworkInterface.InterfaceType = ...
        Phonet: QNetworkInterface.InterfaceType = ...
        Ieee802154: QNetworkInterface.InterfaceType = ...
        SixLoWPAN: QNetworkInterface.InterfaceType = ...
        Ieee80216: QNetworkInterface.InterfaceType = ...
        Ieee1394: QNetworkInterface.InterfaceType = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkInterface) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def addressEntries(self) -> List[PySide6.QtNetwork.QNetworkAddressEntry]:
        ...
    
    @staticmethod
    def allAddresses() -> List[PySide6.QtNetwork.QHostAddress]:
        ...
    
    @staticmethod
    def allInterfaces() -> List[PySide6.QtNetwork.QNetworkInterface]:
        ...
    
    def flags(self) -> PySide6.QtNetwork.QNetworkInterface.InterfaceFlag:
        ...
    
    def hardwareAddress(self) -> str:
        ...
    
    def humanReadableName(self) -> str:
        ...
    
    def index(self) -> int:
        ...
    
    @staticmethod
    def interfaceFromIndex(index: int) -> PySide6.QtNetwork.QNetworkInterface:
        ...
    
    @staticmethod
    def interfaceFromName(name: str) -> PySide6.QtNetwork.QNetworkInterface:
        ...
    
    @staticmethod
    def interfaceIndexFromName(name: str) -> int:
        ...
    
    @staticmethod
    def interfaceNameFromIndex(index: int) -> str:
        ...
    
    def isValid(self) -> bool:
        ...
    
    def maximumTransmissionUnit(self) -> int:
        ...
    
    def name(self) -> str:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QNetworkInterface) -> None:
        ...
    
    def type(self) -> PySide6.QtNetwork.QNetworkInterface.InterfaceType:
        ...
    


class QNetworkProxy(Shiboken.Object):
    class Capability(enum.Flag):
        TunnelingCapability: QNetworkProxy.Capability = ...
        ListeningCapability: QNetworkProxy.Capability = ...
        UdpTunnelingCapability: QNetworkProxy.Capability = ...
        CachingCapability: QNetworkProxy.Capability = ...
        HostNameLookupCapability: QNetworkProxy.Capability = ...
        SctpTunnelingCapability: QNetworkProxy.Capability = ...
        SctpListeningCapability: QNetworkProxy.Capability = ...
    
    
    class ProxyType(enum.Enum):
        DefaultProxy: QNetworkProxy.ProxyType = ...
        Socks5Proxy: QNetworkProxy.ProxyType = ...
        NoProxy: QNetworkProxy.ProxyType = ...
        HttpProxy: QNetworkProxy.ProxyType = ...
        HttpCachingProxy: QNetworkProxy.ProxyType = ...
        FtpCachingProxy: QNetworkProxy.ProxyType = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: Union[PySide6.QtNetwork.QNetworkProxy, PySide6.QtNetwork.QNetworkProxy.ProxyType]) -> None:
        ...
    
    @overload
    def __init__(self, type: PySide6.QtNetwork.QNetworkProxy.ProxyType, hostName: str = ..., port: int = ..., user: str = ..., password: str = ...) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    @staticmethod
    def applicationProxy() -> PySide6.QtNetwork.QNetworkProxy:
        ...
    
    def capabilities(self) -> PySide6.QtNetwork.QNetworkProxy.Capability:
        ...
    
    def hasRawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes]) -> bool:
        ...
    
    def header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders) -> Any:
        ...
    
    def hostName(self) -> str:
        ...
    
    def isCachingProxy(self) -> bool:
        ...
    
    def isTransparentProxy(self) -> bool:
        ...
    
    def password(self) -> str:
        ...
    
    def port(self) -> int:
        ...
    
    def rawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes]) -> PySide6.QtCore.QByteArray:
        ...
    
    def rawHeaderList(self) -> List[PySide6.QtCore.QByteArray]:
        ...
    
    @staticmethod
    def setApplicationProxy(proxy: Union[PySide6.QtNetwork.QNetworkProxy, PySide6.QtNetwork.QNetworkProxy.ProxyType]) -> None:
        ...
    
    def setCapabilities(self, capab: PySide6.QtNetwork.QNetworkProxy.Capability) -> None:
        ...
    
    def setHeader(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, value: Any) -> None:
        ...
    
    def setHostName(self, hostName: str) -> None:
        ...
    
    def setPassword(self, password: str) -> None:
        ...
    
    def setPort(self, port: int) -> None:
        ...
    
    def setRawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes], value: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setType(self, type: PySide6.QtNetwork.QNetworkProxy.ProxyType) -> None:
        ...
    
    def setUser(self, userName: str) -> None:
        ...
    
    def swap(self, other: Union[PySide6.QtNetwork.QNetworkProxy, PySide6.QtNetwork.QNetworkProxy.ProxyType]) -> None:
        ...
    
    def type(self) -> PySide6.QtNetwork.QNetworkProxy.ProxyType:
        ...
    
    def user(self) -> str:
        ...
    


class QNetworkProxyFactory(Shiboken.Object):
    def __init__(self) -> None:
        ...
    
    @staticmethod
    def proxyForQuery(query: Union[PySide6.QtNetwork.QNetworkProxyQuery, PySide6.QtCore.QUrl, int]) -> List[PySide6.QtNetwork.QNetworkProxy]:
        ...
    
    def queryProxy(self, query: Union[PySide6.QtNetwork.QNetworkProxyQuery, PySide6.QtCore.QUrl, int] = ...) -> List[PySide6.QtNetwork.QNetworkProxy]:
        ...
    
    @staticmethod
    def setApplicationProxyFactory(factory: PySide6.QtNetwork.QNetworkProxyFactory) -> None:
        ...
    
    @staticmethod
    def setUseSystemConfiguration(enable: bool) -> None:
        ...
    
    @staticmethod
    def systemProxyForQuery(query: Union[PySide6.QtNetwork.QNetworkProxyQuery, PySide6.QtCore.QUrl, int] = ...) -> List[PySide6.QtNetwork.QNetworkProxy]:
        ...
    
    @staticmethod
    def usesSystemConfiguration() -> bool:
        ...
    


class QNetworkProxyQuery(Shiboken.Object):
    class QueryType(enum.Enum):
        TcpSocket: QNetworkProxyQuery.QueryType = ...
        UdpSocket: QNetworkProxyQuery.QueryType = ...
        SctpSocket: QNetworkProxyQuery.QueryType = ...
        TcpServer: QNetworkProxyQuery.QueryType = ...
        UrlRequest: QNetworkProxyQuery.QueryType = ...
        SctpServer: QNetworkProxyQuery.QueryType = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, bindPort: int, protocolTag: str = ..., queryType: PySide6.QtNetwork.QNetworkProxyQuery.QueryType = ...) -> None:
        ...
    
    @overload
    def __init__(self, hostname: str, port: int, protocolTag: str = ..., queryType: PySide6.QtNetwork.QNetworkProxyQuery.QueryType = ...) -> None:
        ...
    
    @overload
    def __init__(self, other: Union[PySide6.QtNetwork.QNetworkProxyQuery, PySide6.QtCore.QUrl, int]) -> None:
        ...
    
    @overload
    def __init__(self, requestUrl: Union[PySide6.QtCore.QUrl, str], queryType: PySide6.QtNetwork.QNetworkProxyQuery.QueryType = ...) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def localPort(self) -> int:
        ...
    
    def peerHostName(self) -> str:
        ...
    
    def peerPort(self) -> int:
        ...
    
    def protocolTag(self) -> str:
        ...
    
    def queryType(self) -> PySide6.QtNetwork.QNetworkProxyQuery.QueryType:
        ...
    
    def setLocalPort(self, port: int) -> None:
        ...
    
    def setPeerHostName(self, hostname: str) -> None:
        ...
    
    def setPeerPort(self, port: int) -> None:
        ...
    
    def setProtocolTag(self, protocolTag: str) -> None:
        ...
    
    def setQueryType(self, type: PySide6.QtNetwork.QNetworkProxyQuery.QueryType) -> None:
        ...
    
    def setUrl(self, url: Union[PySide6.QtCore.QUrl, str]) -> None:
        ...
    
    def swap(self, other: Union[PySide6.QtNetwork.QNetworkProxyQuery, PySide6.QtCore.QUrl, int]) -> None:
        ...
    
    def url(self) -> PySide6.QtCore.QUrl:
        ...
    


class QNetworkReply(PySide6.QtCore.QIODevice):
    class NetworkError(enum.Enum):
        NoError: QNetworkReply.NetworkError = ...
        ConnectionRefusedError: QNetworkReply.NetworkError = ...
        RemoteHostClosedError: QNetworkReply.NetworkError = ...
        HostNotFoundError: QNetworkReply.NetworkError = ...
        TimeoutError: QNetworkReply.NetworkError = ...
        OperationCanceledError: QNetworkReply.NetworkError = ...
        SslHandshakeFailedError: QNetworkReply.NetworkError = ...
        TemporaryNetworkFailureError: QNetworkReply.NetworkError = ...
        NetworkSessionFailedError: QNetworkReply.NetworkError = ...
        BackgroundRequestNotAllowedError: QNetworkReply.NetworkError = ...
        TooManyRedirectsError: QNetworkReply.NetworkError = ...
        InsecureRedirectError: QNetworkReply.NetworkError = ...
        UnknownNetworkError: QNetworkReply.NetworkError = ...
        ProxyConnectionRefusedError: QNetworkReply.NetworkError = ...
        ProxyConnectionClosedError: QNetworkReply.NetworkError = ...
        ProxyNotFoundError: QNetworkReply.NetworkError = ...
        ProxyTimeoutError: QNetworkReply.NetworkError = ...
        ProxyAuthenticationRequiredError: QNetworkReply.NetworkError = ...
        UnknownProxyError: QNetworkReply.NetworkError = ...
        ContentAccessDenied: QNetworkReply.NetworkError = ...
        ContentOperationNotPermittedError: QNetworkReply.NetworkError = ...
        ContentNotFoundError: QNetworkReply.NetworkError = ...
        AuthenticationRequiredError: QNetworkReply.NetworkError = ...
        ContentReSendError: QNetworkReply.NetworkError = ...
        ContentConflictError: QNetworkReply.NetworkError = ...
        ContentGoneError: QNetworkReply.NetworkError = ...
        UnknownContentError: QNetworkReply.NetworkError = ...
        ProtocolUnknownError: QNetworkReply.NetworkError = ...
        ProtocolInvalidOperationError: QNetworkReply.NetworkError = ...
        ProtocolFailure: QNetworkReply.NetworkError = ...
        InternalServerError: QNetworkReply.NetworkError = ...
        OperationNotImplementedError: QNetworkReply.NetworkError = ...
        ServiceUnavailableError: QNetworkReply.NetworkError = ...
        UnknownServerError: QNetworkReply.NetworkError = ...
    
    
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def abort(self) -> None:
        ...
    
    def attribute(self, code: PySide6.QtNetwork.QNetworkRequest.Attribute) -> Any:
        ...
    
    def close(self) -> None:
        ...
    
    def error(self) -> PySide6.QtNetwork.QNetworkReply.NetworkError:
        ...
    
    def hasRawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes]) -> bool:
        ...
    
    def header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders) -> Any:
        ...
    
    @overload
    def ignoreSslErrors(self) -> None:
        ...
    
    @overload
    def ignoreSslErrors(self, errors: Sequence[PySide6.QtNetwork.QSslError]) -> None:
        ...
    
    def ignoreSslErrorsImplementation(self, arg__1: Sequence[PySide6.QtNetwork.QSslError]) -> None:
        ...
    
    def isFinished(self) -> bool:
        ...
    
    def isRunning(self) -> bool:
        ...
    
    def isSequential(self) -> bool:
        ...
    
    def manager(self) -> PySide6.QtNetwork.QNetworkAccessManager:
        ...
    
    def operation(self) -> PySide6.QtNetwork.QNetworkAccessManager.Operation:
        ...
    
    def rawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes]) -> PySide6.QtCore.QByteArray:
        ...
    
    def rawHeaderList(self) -> List[PySide6.QtCore.QByteArray]:
        ...
    
    def rawHeaderPairs(self) -> List[Tuple[PySide6.QtCore.QByteArray, PySide6.QtCore.QByteArray]]:
        ...
    
    def readBufferSize(self) -> int:
        ...
    
    def request(self) -> PySide6.QtNetwork.QNetworkRequest:
        ...
    
    def setAttribute(self, code: PySide6.QtNetwork.QNetworkRequest.Attribute, value: Any) -> None:
        ...
    
    def setError(self, errorCode: PySide6.QtNetwork.QNetworkReply.NetworkError, errorString: str) -> None:
        ...
    
    def setFinished(self, arg__1: bool) -> None:
        ...
    
    def setHeader(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, value: Any) -> None:
        ...
    
    def setOperation(self, operation: PySide6.QtNetwork.QNetworkAccessManager.Operation) -> None:
        ...
    
    def setRawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes], value: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setReadBufferSize(self, size: int) -> None:
        ...
    
    def setRequest(self, request: PySide6.QtNetwork.QNetworkRequest) -> None:
        ...
    
    def setSslConfiguration(self, configuration: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    def setSslConfigurationImplementation(self, arg__1: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    def setUrl(self, url: Union[PySide6.QtCore.QUrl, str]) -> None:
        ...
    
    def sslConfiguration(self) -> PySide6.QtNetwork.QSslConfiguration:
        ...
    
    def sslConfigurationImplementation(self, arg__1: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    def url(self) -> PySide6.QtCore.QUrl:
        ...
    
    def writeData(self, data: bytes, len: int) -> int:
        ...
    


class QNetworkRequest(Shiboken.Object):
    class Attribute(enum.Enum):
        HttpStatusCodeAttribute: QNetworkRequest.Attribute = ...
        HttpReasonPhraseAttribute: QNetworkRequest.Attribute = ...
        RedirectionTargetAttribute: QNetworkRequest.Attribute = ...
        ConnectionEncryptedAttribute: QNetworkRequest.Attribute = ...
        CacheLoadControlAttribute: QNetworkRequest.Attribute = ...
        CacheSaveControlAttribute: QNetworkRequest.Attribute = ...
        SourceIsFromCacheAttribute: QNetworkRequest.Attribute = ...
        DoNotBufferUploadDataAttribute: QNetworkRequest.Attribute = ...
        HttpPipeliningAllowedAttribute: QNetworkRequest.Attribute = ...
        HttpPipeliningWasUsedAttribute: QNetworkRequest.Attribute = ...
        CustomVerbAttribute: QNetworkRequest.Attribute = ...
        CookieLoadControlAttribute: QNetworkRequest.Attribute = ...
        AuthenticationReuseAttribute: QNetworkRequest.Attribute = ...
        CookieSaveControlAttribute: QNetworkRequest.Attribute = ...
        MaximumDownloadBufferSizeAttribute: QNetworkRequest.Attribute = ...
        DownloadBufferAttribute: QNetworkRequest.Attribute = ...
        SynchronousRequestAttribute: QNetworkRequest.Attribute = ...
        BackgroundRequestAttribute: QNetworkRequest.Attribute = ...
        EmitAllUploadProgressSignalsAttribute: QNetworkRequest.Attribute = ...
        Http2AllowedAttribute: QNetworkRequest.Attribute = ...
        Http2WasUsedAttribute: QNetworkRequest.Attribute = ...
        OriginalContentLengthAttribute: QNetworkRequest.Attribute = ...
        RedirectPolicyAttribute: QNetworkRequest.Attribute = ...
        Http2DirectAttribute: QNetworkRequest.Attribute = ...
        ResourceTypeAttribute: QNetworkRequest.Attribute = ...
        AutoDeleteReplyOnFinishAttribute: QNetworkRequest.Attribute = ...
        ConnectionCacheExpiryTimeoutSecondsAttribute: QNetworkRequest.Attribute = ...
        Http2CleartextAllowedAttribute: QNetworkRequest.Attribute = ...
        User: QNetworkRequest.Attribute = ...
        UserMax: QNetworkRequest.Attribute = ...
    
    
    class CacheLoadControl(enum.Enum):
        AlwaysNetwork: QNetworkRequest.CacheLoadControl = ...
        PreferNetwork: QNetworkRequest.CacheLoadControl = ...
        PreferCache: QNetworkRequest.CacheLoadControl = ...
        AlwaysCache: QNetworkRequest.CacheLoadControl = ...
    
    
    class KnownHeaders(enum.Enum):
        ContentTypeHeader: QNetworkRequest.KnownHeaders = ...
        ContentLengthHeader: QNetworkRequest.KnownHeaders = ...
        LocationHeader: QNetworkRequest.KnownHeaders = ...
        LastModifiedHeader: QNetworkRequest.KnownHeaders = ...
        CookieHeader: QNetworkRequest.KnownHeaders = ...
        SetCookieHeader: QNetworkRequest.KnownHeaders = ...
        ContentDispositionHeader: QNetworkRequest.KnownHeaders = ...
        UserAgentHeader: QNetworkRequest.KnownHeaders = ...
        ServerHeader: QNetworkRequest.KnownHeaders = ...
        IfModifiedSinceHeader: QNetworkRequest.KnownHeaders = ...
        ETagHeader: QNetworkRequest.KnownHeaders = ...
        IfMatchHeader: QNetworkRequest.KnownHeaders = ...
        IfNoneMatchHeader: QNetworkRequest.KnownHeaders = ...
    
    
    class LoadControl(enum.Enum):
        Automatic: QNetworkRequest.LoadControl = ...
        Manual: QNetworkRequest.LoadControl = ...
    
    
    class Priority(enum.Enum):
        HighPriority: QNetworkRequest.Priority = ...
        NormalPriority: QNetworkRequest.Priority = ...
        LowPriority: QNetworkRequest.Priority = ...
    
    
    class RedirectPolicy(enum.Enum):
        ManualRedirectPolicy: QNetworkRequest.RedirectPolicy = ...
        NoLessSafeRedirectPolicy: QNetworkRequest.RedirectPolicy = ...
        SameOriginRedirectPolicy: QNetworkRequest.RedirectPolicy = ...
        UserVerifiedRedirectPolicy: QNetworkRequest.RedirectPolicy = ...
    
    
    class TransferTimeoutConstant(enum.Enum):
        DefaultTransferTimeoutConstant: QNetworkRequest.TransferTimeoutConstant = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QNetworkRequest) -> None:
        ...
    
    @overload
    def __init__(self, url: Union[PySide6.QtCore.QUrl, str]) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def attribute(self, code: PySide6.QtNetwork.QNetworkRequest.Attribute, defaultValue: Any = ...) -> Any:
        ...
    
    def decompressedSafetyCheckThreshold(self) -> int:
        ...
    
    def hasRawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes]) -> bool:
        ...
    
    def header(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders) -> Any:
        ...
    
    def http2Configuration(self) -> PySide6.QtNetwork.QHttp2Configuration:
        ...
    
    def maximumRedirectsAllowed(self) -> int:
        ...
    
    def originatingObject(self) -> PySide6.QtCore.QObject:
        ...
    
    def peerVerifyName(self) -> str:
        ...
    
    def priority(self) -> PySide6.QtNetwork.QNetworkRequest.Priority:
        ...
    
    def rawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes]) -> PySide6.QtCore.QByteArray:
        ...
    
    def rawHeaderList(self) -> List[PySide6.QtCore.QByteArray]:
        ...
    
    def setAttribute(self, code: PySide6.QtNetwork.QNetworkRequest.Attribute, value: Any) -> None:
        ...
    
    def setDecompressedSafetyCheckThreshold(self, threshold: int) -> None:
        ...
    
    def setHeader(self, header: PySide6.QtNetwork.QNetworkRequest.KnownHeaders, value: Any) -> None:
        ...
    
    def setHttp2Configuration(self, configuration: PySide6.QtNetwork.QHttp2Configuration) -> None:
        ...
    
    def setMaximumRedirectsAllowed(self, maximumRedirectsAllowed: int) -> None:
        ...
    
    def setOriginatingObject(self, object: PySide6.QtCore.QObject) -> None:
        ...
    
    def setPeerVerifyName(self, peerName: str) -> None:
        ...
    
    def setPriority(self, priority: PySide6.QtNetwork.QNetworkRequest.Priority) -> None:
        ...
    
    def setRawHeader(self, headerName: Union[PySide6.QtCore.QByteArray, bytes], value: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setSslConfiguration(self, configuration: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    def setTransferTimeout(self, timeout: int = ...) -> None:
        ...
    
    def setUrl(self, url: Union[PySide6.QtCore.QUrl, str]) -> None:
        ...
    
    def sslConfiguration(self) -> PySide6.QtNetwork.QSslConfiguration:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QNetworkRequest) -> None:
        ...
    
    def transferTimeout(self) -> int:
        ...
    
    def url(self) -> PySide6.QtCore.QUrl:
        ...
    


class QOcspCertificateStatus(enum.Enum):
    Good: QOcspCertificateStatus = ...
    Revoked: QOcspCertificateStatus = ...
    Unknown: QOcspCertificateStatus = ...


class QOcspResponse(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QOcspResponse) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def certificateStatus(self) -> PySide6.QtNetwork.QOcspCertificateStatus:
        ...
    
    def revocationReason(self) -> PySide6.QtNetwork.QOcspRevocationReason:
        ...
    
    def subject(self) -> PySide6.QtNetwork.QSslCertificate:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QOcspResponse) -> None:
        ...
    


class QOcspRevocationReason(enum.Enum):
    None_: QOcspRevocationReason = ...
    Unspecified: QOcspRevocationReason = ...
    KeyCompromise: QOcspRevocationReason = ...
    CACompromise: QOcspRevocationReason = ...
    AffiliationChanged: QOcspRevocationReason = ...
    Superseded: QOcspRevocationReason = ...
    CessationOfOperation: QOcspRevocationReason = ...
    CertificateHold: QOcspRevocationReason = ...
    RemoveFromCRL: QOcspRevocationReason = ...


class QPasswordDigestor(Shiboken.Object):
    @staticmethod
    def deriveKeyPbkdf1(algorithm: PySide6.QtCore.QCryptographicHash.Algorithm, password: Union[PySide6.QtCore.QByteArray, bytes], salt: Union[PySide6.QtCore.QByteArray, bytes], iterations: int, dkLen: int) -> PySide6.QtCore.QByteArray:
        ...
    
    @staticmethod
    def deriveKeyPbkdf2(algorithm: PySide6.QtCore.QCryptographicHash.Algorithm, password: Union[PySide6.QtCore.QByteArray, bytes], salt: Union[PySide6.QtCore.QByteArray, bytes], iterations: int, dkLen: int) -> PySide6.QtCore.QByteArray:
        ...
    


class QSsl(Shiboken.Object):
    class AlertLevel(enum.Enum):
        Warning: QSsl.AlertLevel = ...
        Fatal: QSsl.AlertLevel = ...
        Unknown: QSsl.AlertLevel = ...
    
    
    class AlertType(enum.Enum):
        CloseNotify: QSsl.AlertType = ...
        UnexpectedMessage: QSsl.AlertType = ...
        BadRecordMac: QSsl.AlertType = ...
        RecordOverflow: QSsl.AlertType = ...
        DecompressionFailure: QSsl.AlertType = ...
        HandshakeFailure: QSsl.AlertType = ...
        NoCertificate: QSsl.AlertType = ...
        BadCertificate: QSsl.AlertType = ...
        UnsupportedCertificate: QSsl.AlertType = ...
        CertificateRevoked: QSsl.AlertType = ...
        CertificateExpired: QSsl.AlertType = ...
        CertificateUnknown: QSsl.AlertType = ...
        IllegalParameter: QSsl.AlertType = ...
        UnknownCa: QSsl.AlertType = ...
        AccessDenied: QSsl.AlertType = ...
        DecodeError: QSsl.AlertType = ...
        DecryptError: QSsl.AlertType = ...
        ExportRestriction: QSsl.AlertType = ...
        ProtocolVersion: QSsl.AlertType = ...
        InsufficientSecurity: QSsl.AlertType = ...
        InternalError: QSsl.AlertType = ...
        InappropriateFallback: QSsl.AlertType = ...
        UserCancelled: QSsl.AlertType = ...
        NoRenegotiation: QSsl.AlertType = ...
        MissingExtension: QSsl.AlertType = ...
        UnsupportedExtension: QSsl.AlertType = ...
        CertificateUnobtainable: QSsl.AlertType = ...
        UnrecognizedName: QSsl.AlertType = ...
        BadCertificateStatusResponse: QSsl.AlertType = ...
        BadCertificateHashValue: QSsl.AlertType = ...
        UnknownPskIdentity: QSsl.AlertType = ...
        CertificateRequired: QSsl.AlertType = ...
        NoApplicationProtocol: QSsl.AlertType = ...
        UnknownAlertMessage: QSsl.AlertType = ...
    
    
    class AlternativeNameEntryType(enum.Enum):
        EmailEntry: QSsl.AlternativeNameEntryType = ...
        DnsEntry: QSsl.AlternativeNameEntryType = ...
        IpAddressEntry: QSsl.AlternativeNameEntryType = ...
    
    
    class EncodingFormat(enum.Enum):
        Pem: QSsl.EncodingFormat = ...
        Der: QSsl.EncodingFormat = ...
    
    
    class ImplementedClass(enum.Enum):
        Key: QSsl.ImplementedClass = ...
        Certificate: QSsl.ImplementedClass = ...
        Socket: QSsl.ImplementedClass = ...
        DiffieHellman: QSsl.ImplementedClass = ...
        EllipticCurve: QSsl.ImplementedClass = ...
        Dtls: QSsl.ImplementedClass = ...
        DtlsCookie: QSsl.ImplementedClass = ...
    
    
    class KeyAlgorithm(enum.Enum):
        Opaque: QSsl.KeyAlgorithm = ...
        Rsa: QSsl.KeyAlgorithm = ...
        Dsa: QSsl.KeyAlgorithm = ...
        Ec: QSsl.KeyAlgorithm = ...
        Dh: QSsl.KeyAlgorithm = ...
    
    
    class KeyType(enum.Enum):
        PrivateKey: QSsl.KeyType = ...
        PublicKey: QSsl.KeyType = ...
    
    
    class SslOption(enum.Flag):
        SslOptionDisableEmptyFragments: QSsl.SslOption = ...
        SslOptionDisableSessionTickets: QSsl.SslOption = ...
        SslOptionDisableCompression: QSsl.SslOption = ...
        SslOptionDisableServerNameIndication: QSsl.SslOption = ...
        SslOptionDisableLegacyRenegotiation: QSsl.SslOption = ...
        SslOptionDisableSessionSharing: QSsl.SslOption = ...
        SslOptionDisableSessionPersistence: QSsl.SslOption = ...
        SslOptionDisableServerCipherPreference: QSsl.SslOption = ...
    
    
    class SslProtocol(enum.Enum):
        UnknownProtocol: QSsl.SslProtocol = ...
        TlsV1_0: QSsl.SslProtocol = ...
        TlsV1_1: QSsl.SslProtocol = ...
        TlsV1_2: QSsl.SslProtocol = ...
        AnyProtocol: QSsl.SslProtocol = ...
        SecureProtocols: QSsl.SslProtocol = ...
        TlsV1_0OrLater: QSsl.SslProtocol = ...
        TlsV1_1OrLater: QSsl.SslProtocol = ...
        TlsV1_2OrLater: QSsl.SslProtocol = ...
        DtlsV1_0: QSsl.SslProtocol = ...
        DtlsV1_0OrLater: QSsl.SslProtocol = ...
        DtlsV1_2: QSsl.SslProtocol = ...
        DtlsV1_2OrLater: QSsl.SslProtocol = ...
        TlsV1_3: QSsl.SslProtocol = ...
        TlsV1_3OrLater: QSsl.SslProtocol = ...
    
    
    class SupportedFeature(enum.Enum):
        CertificateVerification: QSsl.SupportedFeature = ...
        ClientSideAlpn: QSsl.SupportedFeature = ...
        ServerSideAlpn: QSsl.SupportedFeature = ...
        Ocsp: QSsl.SupportedFeature = ...
        Psk: QSsl.SupportedFeature = ...
        SessionTicket: QSsl.SupportedFeature = ...
        Alerts: QSsl.SupportedFeature = ...
    
    


class QSslCertificate(Shiboken.Object):
    class PatternSyntax(enum.Enum):
        RegularExpression: QSslCertificate.PatternSyntax = ...
        Wildcard: QSslCertificate.PatternSyntax = ...
        FixedString: QSslCertificate.PatternSyntax = ...
    
    
    class SubjectInfo(enum.Enum):
        Organization: QSslCertificate.SubjectInfo = ...
        CommonName: QSslCertificate.SubjectInfo = ...
        LocalityName: QSslCertificate.SubjectInfo = ...
        OrganizationalUnitName: QSslCertificate.SubjectInfo = ...
        CountryName: QSslCertificate.SubjectInfo = ...
        StateOrProvinceName: QSslCertificate.SubjectInfo = ...
        DistinguishedNameQualifier: QSslCertificate.SubjectInfo = ...
        SerialNumber: QSslCertificate.SubjectInfo = ...
        EmailAddress: QSslCertificate.SubjectInfo = ...
    
    
    @overload
    def __init__(self, data: Union[PySide6.QtCore.QByteArray, bytes] = ..., format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> None:
        ...
    
    @overload
    def __init__(self, device: PySide6.QtCore.QIODevice, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> None:
        ...
    
    @overload
    def __init__(self, other: Union[PySide6.QtNetwork.QSslCertificate, PySide6.QtCore.QIODevice]) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def clear(self) -> None:
        ...
    
    def digest(self, algorithm: PySide6.QtCore.QCryptographicHash.Algorithm = ...) -> PySide6.QtCore.QByteArray:
        ...
    
    def effectiveDate(self) -> PySide6.QtCore.QDateTime:
        ...
    
    def expiryDate(self) -> PySide6.QtCore.QDateTime:
        ...
    
    def extensions(self) -> List[PySide6.QtNetwork.QSslCertificateExtension]:
        ...
    
    @staticmethod
    def fromData(data: Union[PySide6.QtCore.QByteArray, bytes], format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> List[PySide6.QtNetwork.QSslCertificate]:
        ...
    
    @staticmethod
    def fromDevice(device: PySide6.QtCore.QIODevice, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> List[PySide6.QtNetwork.QSslCertificate]:
        ...
    
    @staticmethod
    def fromPath(path: str, format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., syntax: PySide6.QtNetwork.QSslCertificate.PatternSyntax = ...) -> List[PySide6.QtNetwork.QSslCertificate]:
        ...
    
    def handle(self) -> int:
        ...
    
    @staticmethod
    def importPkcs12(device: PySide6.QtCore.QIODevice, key: Union[PySide6.QtNetwork.QSslKey, int], cert: Union[PySide6.QtNetwork.QSslCertificate, PySide6.QtCore.QIODevice], caCertificates: Optional[Sequence[PySide6.QtNetwork.QSslCertificate]] = ..., passPhrase: Union[PySide6.QtCore.QByteArray, bytes] = ...) -> bool:
        ...
    
    def isBlacklisted(self) -> bool:
        ...
    
    def isNull(self) -> bool:
        ...
    
    def isSelfSigned(self) -> bool:
        ...
    
    def issuerDisplayName(self) -> str:
        ...
    
    @overload
    def issuerInfo(self, attribute: Union[PySide6.QtCore.QByteArray, bytes]) -> List[str]:
        ...
    
    @overload
    def issuerInfo(self, info: PySide6.QtNetwork.QSslCertificate.SubjectInfo) -> List[str]:
        ...
    
    def issuerInfoAttributes(self) -> List[PySide6.QtCore.QByteArray]:
        ...
    
    def publicKey(self) -> PySide6.QtNetwork.QSslKey:
        ...
    
    def serialNumber(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def subjectAlternativeNames(self) -> OrderedDict[PySide6.QtNetwork.QSsl.AlternativeNameEntryType, List[str]]:
        ...
    
    def subjectDisplayName(self) -> str:
        ...
    
    @overload
    def subjectInfo(self, attribute: Union[PySide6.QtCore.QByteArray, bytes]) -> List[str]:
        ...
    
    @overload
    def subjectInfo(self, info: PySide6.QtNetwork.QSslCertificate.SubjectInfo) -> List[str]:
        ...
    
    def subjectInfoAttributes(self) -> List[PySide6.QtCore.QByteArray]:
        ...
    
    def swap(self, other: Union[PySide6.QtNetwork.QSslCertificate, PySide6.QtCore.QIODevice]) -> None:
        ...
    
    def toDer(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def toPem(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def toText(self) -> str:
        ...
    
    @staticmethod
    def verify(certificateChain: Sequence[PySide6.QtNetwork.QSslCertificate], hostName: str = ...) -> List[PySide6.QtNetwork.QSslError]:
        ...
    
    def version(self) -> PySide6.QtCore.QByteArray:
        ...
    


class QSslCertificateExtension(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QSslCertificateExtension) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def isCritical(self) -> bool:
        ...
    
    def isSupported(self) -> bool:
        ...
    
    def name(self) -> str:
        ...
    
    def oid(self) -> str:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QSslCertificateExtension) -> None:
        ...
    
    def value(self) -> Any:
        ...
    


class QSslCipher(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, name: str) -> None:
        ...
    
    @overload
    def __init__(self, name: str, protocol: PySide6.QtNetwork.QSsl.SslProtocol) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QSslCipher) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def authenticationMethod(self) -> str:
        ...
    
    def encryptionMethod(self) -> str:
        ...
    
    def isNull(self) -> bool:
        ...
    
    def keyExchangeMethod(self) -> str:
        ...
    
    def name(self) -> str:
        ...
    
    def protocol(self) -> PySide6.QtNetwork.QSsl.SslProtocol:
        ...
    
    def protocolString(self) -> str:
        ...
    
    def supportedBits(self) -> int:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QSslCipher) -> None:
        ...
    
    def usedBits(self) -> int:
        ...
    


class QSslConfiguration(Shiboken.Object):
    class NextProtocolNegotiationStatus(enum.Enum):
        NextProtocolNegotiationNone: QSslConfiguration.NextProtocolNegotiationStatus = ...
        NextProtocolNegotiationNegotiated: QSslConfiguration.NextProtocolNegotiationStatus = ...
        NextProtocolNegotiationUnsupported: QSslConfiguration.NextProtocolNegotiationStatus = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def addCaCertificate(self, certificate: Union[PySide6.QtNetwork.QSslCertificate, PySide6.QtCore.QIODevice]) -> None:
        ...
    
    @overload
    def addCaCertificates(self, certificates: Sequence[PySide6.QtNetwork.QSslCertificate]) -> None:
        ...
    
    @overload
    def addCaCertificates(self, path: str, format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., syntax: PySide6.QtNetwork.QSslCertificate.PatternSyntax = ...) -> bool:
        ...
    
    def allowedNextProtocols(self) -> List[PySide6.QtCore.QByteArray]:
        ...
    
    def backendConfiguration(self) -> Dict[PySide6.QtCore.QByteArray, Any]:
        ...
    
    def caCertificates(self) -> List[PySide6.QtNetwork.QSslCertificate]:
        ...
    
    def ciphers(self) -> List[PySide6.QtNetwork.QSslCipher]:
        ...
    
    @staticmethod
    def defaultConfiguration() -> PySide6.QtNetwork.QSslConfiguration:
        ...
    
    @staticmethod
    def defaultDtlsConfiguration() -> PySide6.QtNetwork.QSslConfiguration:
        ...
    
    def diffieHellmanParameters(self) -> PySide6.QtNetwork.QSslDiffieHellmanParameters:
        ...
    
    def dtlsCookieVerificationEnabled(self) -> bool:
        ...
    
    def ellipticCurves(self) -> List[PySide6.QtNetwork.QSslEllipticCurve]:
        ...
    
    def ephemeralServerKey(self) -> PySide6.QtNetwork.QSslKey:
        ...
    
    def handshakeMustInterruptOnError(self) -> bool:
        ...
    
    def isNull(self) -> bool:
        ...
    
    def localCertificate(self) -> PySide6.QtNetwork.QSslCertificate:
        ...
    
    def localCertificateChain(self) -> List[PySide6.QtNetwork.QSslCertificate]:
        ...
    
    def missingCertificateIsFatal(self) -> bool:
        ...
    
    def nextNegotiatedProtocol(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def nextProtocolNegotiationStatus(self) -> PySide6.QtNetwork.QSslConfiguration.NextProtocolNegotiationStatus:
        ...
    
    def ocspStaplingEnabled(self) -> bool:
        ...
    
    def peerCertificate(self) -> PySide6.QtNetwork.QSslCertificate:
        ...
    
    def peerCertificateChain(self) -> List[PySide6.QtNetwork.QSslCertificate]:
        ...
    
    def peerVerifyDepth(self) -> int:
        ...
    
    def peerVerifyMode(self) -> PySide6.QtNetwork.QSslSocket.PeerVerifyMode:
        ...
    
    def preSharedKeyIdentityHint(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def privateKey(self) -> PySide6.QtNetwork.QSslKey:
        ...
    
    def protocol(self) -> PySide6.QtNetwork.QSsl.SslProtocol:
        ...
    
    def sessionCipher(self) -> PySide6.QtNetwork.QSslCipher:
        ...
    
    def sessionProtocol(self) -> PySide6.QtNetwork.QSsl.SslProtocol:
        ...
    
    def sessionTicket(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def sessionTicketLifeTimeHint(self) -> int:
        ...
    
    def setAllowedNextProtocols(self, protocols: Sequence[PySide6.QtCore.QByteArray]) -> None:
        ...
    
    def setBackendConfiguration(self, backendConfiguration: Dict[PySide6.QtCore.QByteArray, Any] = ...) -> None:
        ...
    
    def setBackendConfigurationOption(self, name: Union[PySide6.QtCore.QByteArray, bytes], value: Any) -> None:
        ...
    
    def setCaCertificates(self, certificates: Sequence[PySide6.QtNetwork.QSslCertificate]) -> None:
        ...
    
    @overload
    def setCiphers(self, ciphers: Sequence[PySide6.QtNetwork.QSslCipher]) -> None:
        ...
    
    @overload
    def setCiphers(self, ciphers: str) -> None:
        ...
    
    @staticmethod
    def setDefaultConfiguration(configuration: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    @staticmethod
    def setDefaultDtlsConfiguration(configuration: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    def setDiffieHellmanParameters(self, dhparams: PySide6.QtNetwork.QSslDiffieHellmanParameters) -> None:
        ...
    
    def setDtlsCookieVerificationEnabled(self, enable: bool) -> None:
        ...
    
    def setEllipticCurves(self, curves: Sequence[PySide6.QtNetwork.QSslEllipticCurve]) -> None:
        ...
    
    def setHandshakeMustInterruptOnError(self, interrupt: bool) -> None:
        ...
    
    def setLocalCertificate(self, certificate: Union[PySide6.QtNetwork.QSslCertificate, PySide6.QtCore.QIODevice]) -> None:
        ...
    
    def setLocalCertificateChain(self, localChain: Sequence[PySide6.QtNetwork.QSslCertificate]) -> None:
        ...
    
    def setMissingCertificateIsFatal(self, cannotRecover: bool) -> None:
        ...
    
    def setOcspStaplingEnabled(self, enable: bool) -> None:
        ...
    
    def setPeerVerifyDepth(self, depth: int) -> None:
        ...
    
    def setPeerVerifyMode(self, mode: PySide6.QtNetwork.QSslSocket.PeerVerifyMode) -> None:
        ...
    
    def setPreSharedKeyIdentityHint(self, hint: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setPrivateKey(self, key: Union[PySide6.QtNetwork.QSslKey, int]) -> None:
        ...
    
    def setProtocol(self, protocol: PySide6.QtNetwork.QSsl.SslProtocol) -> None:
        ...
    
    def setSessionTicket(self, sessionTicket: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setSslOption(self, option: PySide6.QtNetwork.QSsl.SslOption, on: bool) -> None:
        ...
    
    @staticmethod
    def supportedCiphers() -> List[PySide6.QtNetwork.QSslCipher]:
        ...
    
    @staticmethod
    def supportedEllipticCurves() -> List[PySide6.QtNetwork.QSslEllipticCurve]:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    @staticmethod
    def systemCaCertificates() -> List[PySide6.QtNetwork.QSslCertificate]:
        ...
    
    def testSslOption(self, option: PySide6.QtNetwork.QSsl.SslOption) -> bool:
        ...
    


class QSslDiffieHellmanParameters(Shiboken.Object):
    class Error(enum.Enum):
        NoError: QSslDiffieHellmanParameters.Error = ...
        InvalidInputDataError: QSslDiffieHellmanParameters.Error = ...
        UnsafeParametersError: QSslDiffieHellmanParameters.Error = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QSslDiffieHellmanParameters) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    @staticmethod
    def defaultParameters() -> PySide6.QtNetwork.QSslDiffieHellmanParameters:
        ...
    
    def error(self) -> PySide6.QtNetwork.QSslDiffieHellmanParameters.Error:
        ...
    
    def errorString(self) -> str:
        ...
    
    @overload
    @staticmethod
    def fromEncoded(device: PySide6.QtCore.QIODevice, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> PySide6.QtNetwork.QSslDiffieHellmanParameters:
        ...
    
    @overload
    @staticmethod
    def fromEncoded(encoded: Union[PySide6.QtCore.QByteArray, bytes], format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> PySide6.QtNetwork.QSslDiffieHellmanParameters:
        ...
    
    def isEmpty(self) -> bool:
        ...
    
    def isValid(self) -> bool:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QSslDiffieHellmanParameters) -> None:
        ...
    


class QSslEllipticCurve(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, QSslEllipticCurve: PySide6.QtNetwork.QSslEllipticCurve) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    @staticmethod
    def fromLongName(name: str) -> PySide6.QtNetwork.QSslEllipticCurve:
        ...
    
    @staticmethod
    def fromShortName(name: str) -> PySide6.QtNetwork.QSslEllipticCurve:
        ...
    
    def isTlsNamedCurve(self) -> bool:
        ...
    
    def isValid(self) -> bool:
        ...
    
    def longName(self) -> str:
        ...
    
    def shortName(self) -> str:
        ...
    


class QSslError(Shiboken.Object):
    class SslError(enum.Enum):
        UnspecifiedError: QSslError.SslError = ...
        NoError: QSslError.SslError = ...
        UnableToGetIssuerCertificate: QSslError.SslError = ...
        UnableToDecryptCertificateSignature: QSslError.SslError = ...
        UnableToDecodeIssuerPublicKey: QSslError.SslError = ...
        CertificateSignatureFailed: QSslError.SslError = ...
        CertificateNotYetValid: QSslError.SslError = ...
        CertificateExpired: QSslError.SslError = ...
        InvalidNotBeforeField: QSslError.SslError = ...
        InvalidNotAfterField: QSslError.SslError = ...
        SelfSignedCertificate: QSslError.SslError = ...
        SelfSignedCertificateInChain: QSslError.SslError = ...
        UnableToGetLocalIssuerCertificate: QSslError.SslError = ...
        UnableToVerifyFirstCertificate: QSslError.SslError = ...
        CertificateRevoked: QSslError.SslError = ...
        InvalidCaCertificate: QSslError.SslError = ...
        PathLengthExceeded: QSslError.SslError = ...
        InvalidPurpose: QSslError.SslError = ...
        CertificateUntrusted: QSslError.SslError = ...
        CertificateRejected: QSslError.SslError = ...
        SubjectIssuerMismatch: QSslError.SslError = ...
        AuthorityIssuerSerialNumberMismatch: QSslError.SslError = ...
        NoPeerCertificate: QSslError.SslError = ...
        HostNameMismatch: QSslError.SslError = ...
        NoSslSupport: QSslError.SslError = ...
        CertificateBlacklisted: QSslError.SslError = ...
        CertificateStatusUnknown: QSslError.SslError = ...
        OcspNoResponseFound: QSslError.SslError = ...
        OcspMalformedRequest: QSslError.SslError = ...
        OcspMalformedResponse: QSslError.SslError = ...
        OcspInternalError: QSslError.SslError = ...
        OcspTryLater: QSslError.SslError = ...
        OcspSigRequred: QSslError.SslError = ...
        OcspUnauthorized: QSslError.SslError = ...
        OcspResponseCannotBeTrusted: QSslError.SslError = ...
        OcspResponseCertIdUnknown: QSslError.SslError = ...
        OcspResponseExpired: QSslError.SslError = ...
        OcspStatusUnknown: QSslError.SslError = ...
    
    
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, error: PySide6.QtNetwork.QSslError.SslError) -> None:
        ...
    
    @overload
    def __init__(self, error: PySide6.QtNetwork.QSslError.SslError, certificate: Union[PySide6.QtNetwork.QSslCertificate, PySide6.QtCore.QIODevice]) -> None:
        ...
    
    @overload
    def __init__(self, other: PySide6.QtNetwork.QSslError) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def certificate(self) -> PySide6.QtNetwork.QSslCertificate:
        ...
    
    def error(self) -> PySide6.QtNetwork.QSslError.SslError:
        ...
    
    def errorString(self) -> str:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QSslError) -> None:
        ...
    


class QSslKey(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, device: PySide6.QtCore.QIODevice, algorithm: PySide6.QtNetwork.QSsl.KeyAlgorithm, format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., type: PySide6.QtNetwork.QSsl.KeyType = ..., passPhrase: Union[PySide6.QtCore.QByteArray, bytes] = ...) -> None:
        ...
    
    @overload
    def __init__(self, encoded: Union[PySide6.QtCore.QByteArray, bytes], algorithm: PySide6.QtNetwork.QSsl.KeyAlgorithm, format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., type: PySide6.QtNetwork.QSsl.KeyType = ..., passPhrase: Union[PySide6.QtCore.QByteArray, bytes] = ...) -> None:
        ...
    
    @overload
    def __init__(self, handle: int, type: PySide6.QtNetwork.QSsl.KeyType = ...) -> None:
        ...
    
    @overload
    def __init__(self, other: Union[PySide6.QtNetwork.QSslKey, int]) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def algorithm(self) -> PySide6.QtNetwork.QSsl.KeyAlgorithm:
        ...
    
    def clear(self) -> None:
        ...
    
    def handle(self) -> int:
        ...
    
    def isNull(self) -> bool:
        ...
    
    def length(self) -> int:
        ...
    
    def swap(self, other: Union[PySide6.QtNetwork.QSslKey, int]) -> None:
        ...
    
    def toDer(self, passPhrase: Union[PySide6.QtCore.QByteArray, bytes] = ...) -> PySide6.QtCore.QByteArray:
        ...
    
    def toPem(self, passPhrase: Union[PySide6.QtCore.QByteArray, bytes] = ...) -> PySide6.QtCore.QByteArray:
        ...
    
    def type(self) -> PySide6.QtNetwork.QSsl.KeyType:
        ...
    


class QSslPreSharedKeyAuthenticator(Shiboken.Object):
    @overload
    def __init__(self) -> None:
        ...
    
    @overload
    def __init__(self, authenticator: PySide6.QtNetwork.QSslPreSharedKeyAuthenticator) -> None:
        ...
    
    @staticmethod
    def __copy__() -> None:
        ...
    
    def identity(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def identityHint(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def maximumIdentityLength(self) -> int:
        ...
    
    def maximumPreSharedKeyLength(self) -> int:
        ...
    
    def preSharedKey(self) -> PySide6.QtCore.QByteArray:
        ...
    
    def setIdentity(self, identity: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def setPreSharedKey(self, preSharedKey: Union[PySide6.QtCore.QByteArray, bytes]) -> None:
        ...
    
    def swap(self, other: PySide6.QtNetwork.QSslPreSharedKeyAuthenticator) -> None:
        ...
    


class QSslServer(PySide6.QtNetwork.QTcpServer):
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def handshakeTimeout(self) -> int:
        ...
    
    def incomingConnection(self, socket: int) -> None:
        ...
    
    def setHandshakeTimeout(self, timeout: int) -> None:
        ...
    
    def setSslConfiguration(self, sslConfiguration: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    def sslConfiguration(self) -> PySide6.QtNetwork.QSslConfiguration:
        ...
    


class QSslSocket(PySide6.QtNetwork.QTcpSocket):
    class PeerVerifyMode(enum.Enum):
        VerifyNone: QSslSocket.PeerVerifyMode = ...
        QueryPeer: QSslSocket.PeerVerifyMode = ...
        VerifyPeer: QSslSocket.PeerVerifyMode = ...
        AutoVerifyPeer: QSslSocket.PeerVerifyMode = ...
    
    
    class SslMode(enum.Enum):
        UnencryptedMode: QSslSocket.SslMode = ...
        SslClientMode: QSslSocket.SslMode = ...
        SslServerMode: QSslSocket.SslMode = ...
    
    
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    @staticmethod
    def activeBackend() -> str:
        ...
    
    def atEnd(self) -> bool:
        ...
    
    @staticmethod
    def availableBackends() -> List[str]:
        ...
    
    def bytesAvailable(self) -> int:
        ...
    
    def bytesToWrite(self) -> int:
        ...
    
    def canReadLine(self) -> bool:
        ...
    
    def close(self) -> None:
        ...
    
    @overload
    def connectToHost(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> None:
        ...
    
    @overload
    def connectToHost(self, hostName: str, port: int, openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ..., protocol: PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...) -> None:
        ...
    
    @overload
    def connectToHostEncrypted(self, hostName: str, port: int, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ..., protocol: PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...) -> None:
        ...
    
    @overload
    def connectToHostEncrypted(self, hostName: str, port: int, sslPeerName: str, mode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ..., protocol: PySide6.QtNetwork.QAbstractSocket.NetworkLayerProtocol = ...) -> None:
        ...
    
    def continueInterruptedHandshake(self) -> None:
        ...
    
    def disconnectFromHost(self) -> None:
        ...
    
    def encryptedBytesAvailable(self) -> int:
        ...
    
    def encryptedBytesToWrite(self) -> int:
        ...
    
    @overload
    def ignoreSslErrors(self) -> None:
        ...
    
    @overload
    def ignoreSslErrors(self, errors: Sequence[PySide6.QtNetwork.QSslError]) -> None:
        ...
    
    @staticmethod
    def implementedClasses(backendName: str = ...) -> List[PySide6.QtNetwork.QSsl.ImplementedClass]:
        ...
    
    @staticmethod
    def isClassImplemented(cl: PySide6.QtNetwork.QSsl.ImplementedClass, backendName: str = ...) -> bool:
        ...
    
    def isEncrypted(self) -> bool:
        ...
    
    @staticmethod
    def isFeatureSupported(feat: PySide6.QtNetwork.QSsl.SupportedFeature, backendName: str = ...) -> bool:
        ...
    
    @staticmethod
    def isProtocolSupported(protocol: PySide6.QtNetwork.QSsl.SslProtocol, backendName: str = ...) -> bool:
        ...
    
    def localCertificate(self) -> PySide6.QtNetwork.QSslCertificate:
        ...
    
    def localCertificateChain(self) -> List[PySide6.QtNetwork.QSslCertificate]:
        ...
    
    def mode(self) -> PySide6.QtNetwork.QSslSocket.SslMode:
        ...
    
    def ocspResponses(self) -> List[PySide6.QtNetwork.QOcspResponse]:
        ...
    
    def peerCertificate(self) -> PySide6.QtNetwork.QSslCertificate:
        ...
    
    def peerCertificateChain(self) -> List[PySide6.QtNetwork.QSslCertificate]:
        ...
    
    def peerVerifyDepth(self) -> int:
        ...
    
    def peerVerifyMode(self) -> PySide6.QtNetwork.QSslSocket.PeerVerifyMode:
        ...
    
    def peerVerifyName(self) -> str:
        ...
    
    def privateKey(self) -> PySide6.QtNetwork.QSslKey:
        ...
    
    def protocol(self) -> PySide6.QtNetwork.QSsl.SslProtocol:
        ...
    
    def readData(self, maxlen: int) -> object:
        ...
    
    def resume(self) -> None:
        ...
    
    def sessionCipher(self) -> PySide6.QtNetwork.QSslCipher:
        ...
    
    def sessionProtocol(self) -> PySide6.QtNetwork.QSsl.SslProtocol:
        ...
    
    @staticmethod
    def setActiveBackend(backendName: str) -> bool:
        ...
    
    @overload
    def setLocalCertificate(self, certificate: Union[PySide6.QtNetwork.QSslCertificate, PySide6.QtCore.QIODevice]) -> None:
        ...
    
    @overload
    def setLocalCertificate(self, fileName: str, format: PySide6.QtNetwork.QSsl.EncodingFormat = ...) -> None:
        ...
    
    def setLocalCertificateChain(self, localChain: Sequence[PySide6.QtNetwork.QSslCertificate]) -> None:
        ...
    
    def setPeerVerifyDepth(self, depth: int) -> None:
        ...
    
    def setPeerVerifyMode(self, mode: PySide6.QtNetwork.QSslSocket.PeerVerifyMode) -> None:
        ...
    
    def setPeerVerifyName(self, hostName: str) -> None:
        ...
    
    @overload
    def setPrivateKey(self, fileName: str, algorithm: PySide6.QtNetwork.QSsl.KeyAlgorithm = ..., format: PySide6.QtNetwork.QSsl.EncodingFormat = ..., passPhrase: Union[PySide6.QtCore.QByteArray, bytes] = ...) -> None:
        ...
    
    @overload
    def setPrivateKey(self, key: Union[PySide6.QtNetwork.QSslKey, int]) -> None:
        ...
    
    def setProtocol(self, protocol: PySide6.QtNetwork.QSsl.SslProtocol) -> None:
        ...
    
    def setReadBufferSize(self, size: int) -> None:
        ...
    
    def setSocketDescriptor(self, socketDescriptor: int, state: PySide6.QtNetwork.QAbstractSocket.SocketState = ..., openMode: PySide6.QtCore.QIODeviceBase.OpenModeFlag = ...) -> bool:
        ...
    
    def setSocketOption(self, option: PySide6.QtNetwork.QAbstractSocket.SocketOption, value: Any) -> None:
        ...
    
    def setSslConfiguration(self, config: PySide6.QtNetwork.QSslConfiguration) -> None:
        ...
    
    def skipData(self, maxSize: int) -> int:
        ...
    
    def socketOption(self, option: PySide6.QtNetwork.QAbstractSocket.SocketOption) -> Any:
        ...
    
    def sslConfiguration(self) -> PySide6.QtNetwork.QSslConfiguration:
        ...
    
    def sslHandshakeErrors(self) -> List[PySide6.QtNetwork.QSslError]:
        ...
    
    @staticmethod
    def sslLibraryBuildVersionNumber() -> int:
        ...
    
    @staticmethod
    def sslLibraryBuildVersionString() -> str:
        ...
    
    @staticmethod
    def sslLibraryVersionNumber() -> int:
        ...
    
    @staticmethod
    def sslLibraryVersionString() -> str:
        ...
    
    def startClientEncryption(self) -> None:
        ...
    
    def startServerEncryption(self) -> None:
        ...
    
    @staticmethod
    def supportedFeatures(backendName: str = ...) -> List[PySide6.QtNetwork.QSsl.SupportedFeature]:
        ...
    
    @staticmethod
    def supportedProtocols(backendName: str = ...) -> List[PySide6.QtNetwork.QSsl.SslProtocol]:
        ...
    
    @staticmethod
    def supportsSsl() -> bool:
        ...
    
    def waitForBytesWritten(self, msecs: int = ...) -> bool:
        ...
    
    def waitForConnected(self, msecs: int = ...) -> bool:
        ...
    
    def waitForDisconnected(self, msecs: int = ...) -> bool:
        ...
    
    def waitForEncrypted(self, msecs: int = ...) -> bool:
        ...
    
    def waitForReadyRead(self, msecs: int = ...) -> bool:
        ...
    
    def writeData(self, data: bytes, len: int) -> int:
        ...
    


class QTcpServer(PySide6.QtCore.QObject):
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    def addPendingConnection(self, socket: PySide6.QtNetwork.QTcpSocket) -> None:
        ...
    
    def close(self) -> None:
        ...
    
    def errorString(self) -> str:
        ...
    
    def hasPendingConnections(self) -> bool:
        ...
    
    def incomingConnection(self, handle: int) -> None:
        ...
    
    def isListening(self) -> bool:
        ...
    
    def listen(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress] = ..., port: int = ...) -> bool:
        ...
    
    def listenBacklogSize(self) -> int:
        ...
    
    def maxPendingConnections(self) -> int:
        ...
    
    def nextPendingConnection(self) -> PySide6.QtNetwork.QTcpSocket:
        ...
    
    def pauseAccepting(self) -> None:
        ...
    
    def proxy(self) -> PySide6.QtNetwork.QNetworkProxy:
        ...
    
    def resumeAccepting(self) -> None:
        ...
    
    def serverAddress(self) -> PySide6.QtNetwork.QHostAddress:
        ...
    
    def serverError(self) -> PySide6.QtNetwork.QAbstractSocket.SocketError:
        ...
    
    def serverPort(self) -> int:
        ...
    
    def setListenBacklogSize(self, size: int) -> None:
        ...
    
    def setMaxPendingConnections(self, numConnections: int) -> None:
        ...
    
    def setProxy(self, networkProxy: Union[PySide6.QtNetwork.QNetworkProxy, PySide6.QtNetwork.QNetworkProxy.ProxyType]) -> None:
        ...
    
    def setSocketDescriptor(self, socketDescriptor: int) -> bool:
        ...
    
    def socketDescriptor(self) -> int:
        ...
    
    def waitForNewConnection(self, msec: int) -> Tuple:
        ...
    


class QTcpSocket(PySide6.QtNetwork.QAbstractSocket):
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    @overload
    def bind(self, addr: PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool:
        ...
    
    @overload
    def bind(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool:
        ...
    
    @overload
    def bind(self, port: int = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool:
        ...
    


class QUdpSocket(PySide6.QtNetwork.QAbstractSocket):
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None:
        ...
    
    @overload
    def bind(self, addr: PySide6.QtNetwork.QHostAddress.SpecialAddress, port: int = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool:
        ...
    
    @overload
    def bind(self, address: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool:
        ...
    
    @overload
    def bind(self, port: int = ..., mode: PySide6.QtNetwork.QAbstractSocket.BindFlag = ...) -> bool:
        ...
    
    def hasPendingDatagrams(self) -> bool:
        ...
    
    @overload
    def joinMulticastGroup(self, groupAddress: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> bool:
        ...
    
    @overload
    def joinMulticastGroup(self, groupAddress: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], iface: PySide6.QtNetwork.QNetworkInterface) -> bool:
        ...
    
    @overload
    def leaveMulticastGroup(self, groupAddress: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress]) -> bool:
        ...
    
    @overload
    def leaveMulticastGroup(self, groupAddress: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], iface: PySide6.QtNetwork.QNetworkInterface) -> bool:
        ...
    
    def multicastInterface(self) -> PySide6.QtNetwork.QNetworkInterface:
        ...
    
    def pendingDatagramSize(self) -> int:
        ...
    
    def readDatagram(self, maxlen: int) -> Tuple:
        ...
    
    def receiveDatagram(self, maxSize: int = ...) -> PySide6.QtNetwork.QNetworkDatagram:
        ...
    
    def setMulticastInterface(self, iface: PySide6.QtNetwork.QNetworkInterface) -> None:
        ...
    
    @overload
    def writeDatagram(self, datagram: Union[PySide6.QtCore.QByteArray, bytes], host: Union[PySide6.QtNetwork.QHostAddress, PySide6.QtNetwork.QHostAddress.SpecialAddress], port: int) -> int:
        ...
    
    @overload
    def writeDatagram(self, datagram: Union[PySide6.QtNetwork.QNetworkDatagram, PySide6.QtCore.QByteArray]) -> int:
        ...
    


